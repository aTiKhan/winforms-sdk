'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.1
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------


Imports Microsoft.VisualBasic
Imports System
Namespace GridEditingForm


	''' <summary>
	'''Represents a strongly typed in-memory cache of data.
	'''</summary>
	<Global.System.Serializable(), Global.System.ComponentModel.DesignerCategoryAttribute("code"), Global.System.ComponentModel.ToolboxItem(True), Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"), Global.System.Xml.Serialization.XmlRootAttribute("NwindDataSet"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")> _
	Public Partial Class NwindDataSet
		Inherits Global.System.Data.DataSet

		Private tableCars As CarsDataTable

		Private tableCategories As CategoriesDataTable

		Private tableCustomers As CustomersDataTable

		Private tableEmployees As EmployeesDataTable

		Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Sub New()
			Me.BeginInit()
			Me.InitClass()
			Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = New Global.System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
			AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
			AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
			Me.EndInit()
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
			MyBase.New(info, context, False)
			If (Me.IsBinarySerialized(info, context) = True) Then
				Me.InitVars(False)
				Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = New Global.System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
				AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
				AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
				Return
			End If
			Dim strSchema As String = (CStr(info.GetValue("XmlSchema", GetType(String))))
			If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
				Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
				ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
				If (Not ds.Tables("Cars") Is Nothing) Then
					MyBase.Tables.Add(New CarsDataTable(ds.Tables("Cars")))
				End If
				If (Not ds.Tables("Categories") Is Nothing) Then
					MyBase.Tables.Add(New CategoriesDataTable(ds.Tables("Categories")))
				End If
				If (Not ds.Tables("Customers") Is Nothing) Then
					MyBase.Tables.Add(New CustomersDataTable(ds.Tables("Customers")))
				End If
				If (Not ds.Tables("Employees") Is Nothing) Then
					MyBase.Tables.Add(New EmployeesDataTable(ds.Tables("Employees")))
				End If
				Me.DataSetName = ds.DataSetName
				Me.Prefix = ds.Prefix
				Me.Namespace = ds.Namespace
				Me.Locale = ds.Locale
				Me.CaseSensitive = ds.CaseSensitive
				Me.EnforceConstraints = ds.EnforceConstraints
				Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
				Me.InitVars()
			Else
				Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
			End If
			Me.GetSerializationData(info, context)
			Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = New Global.System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
			AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
			AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Browsable(False), Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
		Public ReadOnly Property Cars() As CarsDataTable
			Get
				Return Me.tableCars
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Browsable(False), Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
		Public ReadOnly Property Categories() As CategoriesDataTable
			Get
				Return Me.tableCategories
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Browsable(False), Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
		Public ReadOnly Property Customers() As CustomersDataTable
			Get
				Return Me.tableCustomers
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Browsable(False), Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
		Public ReadOnly Property Employees() As EmployeesDataTable
			Get
				Return Me.tableEmployees
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.BrowsableAttribute(True), Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)> _
		Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
			Get
				Return Me._schemaSerializationMode
			End Get
			Set
				Me._schemaSerializationMode = Value
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
		Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
			Get
				Return MyBase.Tables
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
		Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
			Get
				Return MyBase.Relations
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Protected Overrides Sub InitializeDerivedDataSet()
			Me.BeginInit()
			Me.InitClass()
			Me.EndInit()
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Overrides Function Clone() As Global.System.Data.DataSet
			Dim cln As NwindDataSet = (CType(MyBase.Clone(), NwindDataSet))
			cln.InitVars()
			cln.SchemaSerializationMode = Me.SchemaSerializationMode
			Return cln
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Protected Overrides Function ShouldSerializeTables() As Boolean
			Return False
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Protected Overrides Function ShouldSerializeRelations() As Boolean
			Return False
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
			If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
				Me.Reset()
				Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
				ds.ReadXml(reader)
				If (Not ds.Tables("Cars") Is Nothing) Then
					MyBase.Tables.Add(New CarsDataTable(ds.Tables("Cars")))
				End If
				If (Not ds.Tables("Categories") Is Nothing) Then
					MyBase.Tables.Add(New CategoriesDataTable(ds.Tables("Categories")))
				End If
				If (Not ds.Tables("Customers") Is Nothing) Then
					MyBase.Tables.Add(New CustomersDataTable(ds.Tables("Customers")))
				End If
				If (Not ds.Tables("Employees") Is Nothing) Then
					MyBase.Tables.Add(New EmployeesDataTable(ds.Tables("Employees")))
				End If
				Me.DataSetName = ds.DataSetName
				Me.Prefix = ds.Prefix
				Me.Namespace = ds.Namespace
				Me.Locale = ds.Locale
				Me.CaseSensitive = ds.CaseSensitive
				Me.EnforceConstraints = ds.EnforceConstraints
				Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
				Me.InitVars()
			Else
				Me.ReadXml(reader)
				Me.InitVars()
			End If
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
			Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
			Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
			stream.Position = 0
			Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Friend Sub InitVars()
			Me.InitVars(True)
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Friend Sub InitVars(ByVal initTable As Boolean)
			Me.tableCars = (CType(MyBase.Tables("Cars"), CarsDataTable))
			If (initTable = True) Then
				If (Not Me.tableCars Is Nothing) Then
					Me.tableCars.InitVars()
				End If
			End If
			Me.tableCategories = (CType(MyBase.Tables("Categories"), CategoriesDataTable))
			If (initTable = True) Then
				If (Not Me.tableCategories Is Nothing) Then
					Me.tableCategories.InitVars()
				End If
			End If
			Me.tableCustomers = (CType(MyBase.Tables("Customers"), CustomersDataTable))
			If (initTable = True) Then
				If (Not Me.tableCustomers Is Nothing) Then
					Me.tableCustomers.InitVars()
				End If
			End If
			Me.tableEmployees = (CType(MyBase.Tables("Employees"), EmployeesDataTable))
			If (initTable = True) Then
				If (Not Me.tableEmployees Is Nothing) Then
					Me.tableEmployees.InitVars()
				End If
			End If
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Private Sub InitClass()
			Me.DataSetName = "NwindDataSet"
			Me.Prefix = ""
			Me.Namespace = "http://tempuri.org/NwindDataSet.xsd"
			Me.EnforceConstraints = True
			Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
			Me.tableCars = New CarsDataTable()
			MyBase.Tables.Add(Me.tableCars)
			Me.tableCategories = New CategoriesDataTable()
			MyBase.Tables.Add(Me.tableCategories)
			Me.tableCustomers = New CustomersDataTable()
			MyBase.Tables.Add(Me.tableCustomers)
			Me.tableEmployees = New EmployeesDataTable()
			MyBase.Tables.Add(Me.tableEmployees)
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Private Function ShouldSerializeCars() As Boolean
			Return False
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Private Function ShouldSerializeCategories() As Boolean
			Return False
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Private Function ShouldSerializeCustomers() As Boolean
			Return False
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Private Function ShouldSerializeEmployees() As Boolean
			Return False
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
			If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
				Me.InitVars()
			End If
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
			Dim ds As NwindDataSet = New NwindDataSet()
			Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
			Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
			Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
			any.Namespace = ds.Namespace
			sequence.Items.Add(any)
			type.Particle = sequence
			Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
			If xs.Contains(dsSchema.TargetNamespace) Then
				Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
				Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
				Try
					Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
					dsSchema.Write(s1)
					Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator()
					Do While schemas.MoveNext()
						schema = (CType(schemas.Current, Global.System.Xml.Schema.XmlSchema))
						s2.SetLength(0)
						schema.Write(s2)
						If (s1.Length = s2.Length) Then
							s1.Position = 0
							s2.Position = 0
							Do While ((s1.Position <> s1.Length) AndAlso (s1.ReadByte() = s2.ReadByte()))

							Loop
							If (s1.Position = s1.Length) Then
								Return type
							End If
						End If
					Loop
				Finally
					If (Not s1 Is Nothing) Then
						s1.Close()
					End If
					If (Not s2 Is Nothing) Then
						s2.Close()
					End If
				End Try
			End If
			xs.Add(dsSchema)
			Return type
		End Function

		<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Delegate Sub CarsRowChangeEventHandler(ByVal sender As Object, ByVal e As CarsRowChangeEvent)

		<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Delegate Sub CategoriesRowChangeEventHandler(ByVal sender As Object, ByVal e As CategoriesRowChangeEvent)

		<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Delegate Sub CustomersRowChangeEventHandler(ByVal sender As Object, ByVal e As CustomersRowChangeEvent)

		<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Delegate Sub EmployeesRowChangeEventHandler(ByVal sender As Object, ByVal e As EmployeesRowChangeEvent)

		''' <summary>
		'''Represents the strongly named DataTable class.
		'''</summary>
		<Global.System.Serializable(), Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
		Public Partial Class CarsDataTable
			Inherits Global.System.Data.TypedTableBase(Of CarsRow)

			Private columnId As Global.System.Data.DataColumn

			Private columnPicture_Name As Global.System.Data.DataColumn

			Private columnKBytes As Global.System.Data.DataColumn

			Private columnDate As Global.System.Data.DataColumn

			Private columnBMP As Global.System.Data.DataColumn

			Private columnPicture As Global.System.Data.DataColumn

			Private columnPersonID As Global.System.Data.DataColumn

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub New()
				Me.TableName = "Cars"
				Me.BeginInit()
				Me.InitClass()
				Me.EndInit()
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Friend Sub New(ByVal table As Global.System.Data.DataTable)
				Me.TableName = table.TableName
				If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
					Me.CaseSensitive = table.CaseSensitive
				End If
				If (table.Locale.ToString() <> table.DataSet.Locale.ToString()) Then
					Me.Locale = table.Locale
				End If
				If (table.Namespace <> table.DataSet.Namespace) Then
					Me.Namespace = table.Namespace
				End If
				Me.Prefix = table.Prefix
				Me.MinimumCapacity = table.MinimumCapacity
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
				MyBase.New(info, context)
				Me.InitVars()
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property IdColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnId
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property Picture_NameColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnPicture_Name
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property KBytesColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnKBytes
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property DateColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnDate
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property BMPColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnBMP
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property PictureColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnPicture
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property PersonIDColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnPersonID
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Browsable(False)> _
			Public ReadOnly Property Count() As Integer
				Get
					Return Me.Rows.Count
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Default Property Item(ByVal index As Integer) As CarsRow
				Get
					Return (CType(Me.Rows(index), CarsRow))
				End Get
			End Property

			<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Event CarsRowChanging As CarsRowChangeEventHandler

			<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Event CarsRowChanged As CarsRowChangeEventHandler

			<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Event CarsRowDeleting As CarsRowChangeEventHandler

			<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Event CarsRowDeleted As CarsRowChangeEventHandler

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub AddCarsRow(ByVal row As CarsRow)
				Me.Rows.Add(row)
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function AddCarsRow(ByVal Id As Integer, ByVal Picture_Name As String, ByVal KBytes As Decimal, ByVal [Date] As System.DateTime, ByVal BMP As Boolean, ByVal Picture As Byte(), ByVal PersonID As Integer) As CarsRow
				Dim rowCarsRow As CarsRow = (CType(Me.NewRow(), CarsRow))
				Dim columnValuesArray As Object() = New Object() { Id, Picture_Name, KBytes, [Date], BMP, Picture, PersonID}
				rowCarsRow.ItemArray = columnValuesArray
				Me.Rows.Add(rowCarsRow)
				Return rowCarsRow
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Overrides Function Clone() As Global.System.Data.DataTable
				Dim cln As CarsDataTable = (CType(MyBase.Clone(), CarsDataTable))
				cln.InitVars()
				Return cln
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
				Return New CarsDataTable()
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Friend Sub InitVars()
				Me.columnId = MyBase.Columns("Id")
				Me.columnPicture_Name = MyBase.Columns("Picture Name")
				Me.columnKBytes = MyBase.Columns("KBytes")
				Me.columnDate = MyBase.Columns("Date")
				Me.columnBMP = MyBase.Columns("BMP")
				Me.columnPicture = MyBase.Columns("Picture")
				Me.columnPersonID = MyBase.Columns("PersonID")
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Private Sub InitClass()
				Me.columnId = New Global.System.Data.DataColumn("Id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnId)
				Me.columnPicture_Name = New Global.System.Data.DataColumn("Picture Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnPicture_Name)
				Me.columnKBytes = New Global.System.Data.DataColumn("KBytes", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnKBytes)
				Me.columnDate = New Global.System.Data.DataColumn("Date", GetType(Global.System.DateTime), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnDate)
				Me.columnBMP = New Global.System.Data.DataColumn("BMP", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnBMP)
				Me.columnPicture = New Global.System.Data.DataColumn("Picture", GetType(Byte() ), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnPicture)
				Me.columnPersonID = New Global.System.Data.DataColumn("PersonID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnPersonID)
				Me.columnPicture_Name.MaxLength = 50
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function NewCarsRow() As CarsRow
				Return (CType(Me.NewRow(), CarsRow))
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
				Return New CarsRow(builder)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Protected Overrides Function GetRowType() As Global.System.Type
				Return GetType(CarsRow)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowChanged(e)
				If (Not Me.CarsRowChangedEvent Is Nothing) Then
					RaiseEvent CarsRowChanged(Me, New CarsRowChangeEvent((CType(e.Row, CarsRow)), e.Action))
				End If
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowChanging(e)
				If (Not Me.CarsRowChangingEvent Is Nothing) Then
					RaiseEvent CarsRowChanging(Me, New CarsRowChangeEvent((CType(e.Row, CarsRow)), e.Action))
				End If
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowDeleted(e)
				If (Not Me.CarsRowDeletedEvent Is Nothing) Then
					RaiseEvent CarsRowDeleted(Me, New CarsRowChangeEvent((CType(e.Row, CarsRow)), e.Action))
				End If
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowDeleting(e)
				If (Not Me.CarsRowDeletingEvent Is Nothing) Then
					RaiseEvent CarsRowDeleting(Me, New CarsRowChangeEvent((CType(e.Row, CarsRow)), e.Action))
				End If
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub RemoveCarsRow(ByVal row As CarsRow)
				Me.Rows.Remove(row)
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
				Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
				Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
				Dim ds As NwindDataSet = New NwindDataSet()
				Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
				any1.Namespace = "http://www.w3.org/2001/XMLSchema"
				any1.MinOccurs = New Decimal(0)
				any1.MaxOccurs = Decimal.MaxValue
				any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
				sequence.Items.Add(any1)
				Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
				any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
				any2.MinOccurs = New Decimal(1)
				any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
				sequence.Items.Add(any2)
				Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
				attribute1.Name = "namespace"
				attribute1.FixedValue = ds.Namespace
				type.Attributes.Add(attribute1)
				Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
				attribute2.Name = "tableTypeName"
				attribute2.FixedValue = "CarsDataTable"
				type.Attributes.Add(attribute2)
				type.Particle = sequence
				Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
				If xs.Contains(dsSchema.TargetNamespace) Then
					Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
					Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
					Try
						Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
						dsSchema.Write(s1)
						Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator()
						Do While schemas.MoveNext()
							schema = (CType(schemas.Current, Global.System.Xml.Schema.XmlSchema))
							s2.SetLength(0)
							schema.Write(s2)
							If (s1.Length = s2.Length) Then
								s1.Position = 0
								s2.Position = 0
								Do While ((s1.Position <> s1.Length) AndAlso (s1.ReadByte() = s2.ReadByte()))

								Loop
								If (s1.Position = s1.Length) Then
									Return type
								End If
							End If
						Loop
					Finally
						If (Not s1 Is Nothing) Then
							s1.Close()
						End If
						If (Not s2 Is Nothing) Then
							s2.Close()
						End If
					End Try
				End If
				xs.Add(dsSchema)
				Return type
			End Function
		End Class

		''' <summary>
		'''Represents the strongly named DataTable class.
		'''</summary>
		<Global.System.Serializable(), Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
		Public Partial Class CategoriesDataTable
			Inherits Global.System.Data.TypedTableBase(Of CategoriesRow)

			Private columnCategoryID As Global.System.Data.DataColumn

			Private columnCategoryName As Global.System.Data.DataColumn

			Private columnDescription As Global.System.Data.DataColumn

			Private columnPicture As Global.System.Data.DataColumn

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub New()
				Me.TableName = "Categories"
				Me.BeginInit()
				Me.InitClass()
				Me.EndInit()
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Friend Sub New(ByVal table As Global.System.Data.DataTable)
				Me.TableName = table.TableName
				If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
					Me.CaseSensitive = table.CaseSensitive
				End If
				If (table.Locale.ToString() <> table.DataSet.Locale.ToString()) Then
					Me.Locale = table.Locale
				End If
				If (table.Namespace <> table.DataSet.Namespace) Then
					Me.Namespace = table.Namespace
				End If
				Me.Prefix = table.Prefix
				Me.MinimumCapacity = table.MinimumCapacity
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
				MyBase.New(info, context)
				Me.InitVars()
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property CategoryIDColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnCategoryID
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property CategoryNameColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnCategoryName
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnDescription
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property PictureColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnPicture
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Browsable(False)> _
			Public ReadOnly Property Count() As Integer
				Get
					Return Me.Rows.Count
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Default Property Item(ByVal index As Integer) As CategoriesRow
				Get
					Return (CType(Me.Rows(index), CategoriesRow))
				End Get
			End Property

			<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Event CategoriesRowChanging As CategoriesRowChangeEventHandler

			<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Event CategoriesRowChanged As CategoriesRowChangeEventHandler

			<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Event CategoriesRowDeleting As CategoriesRowChangeEventHandler

			<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Event CategoriesRowDeleted As CategoriesRowChangeEventHandler

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub AddCategoriesRow(ByVal row As CategoriesRow)
				Me.Rows.Add(row)
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function AddCategoriesRow(ByVal CategoryName As String, ByVal Description As String, ByVal Picture As Byte()) As CategoriesRow
				Dim rowCategoriesRow As CategoriesRow = (CType(Me.NewRow(), CategoriesRow))
				Dim columnValuesArray As Object() = New Object() { Nothing, CategoryName, Description, Picture}
				rowCategoriesRow.ItemArray = columnValuesArray
				Me.Rows.Add(rowCategoriesRow)
				Return rowCategoriesRow
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function FindByCategoryID(ByVal CategoryID As Integer) As CategoriesRow
				Return (CType(Me.Rows.Find(New Object() { CategoryID}), CategoriesRow))
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Overrides Function Clone() As Global.System.Data.DataTable
				Dim cln As CategoriesDataTable = (CType(MyBase.Clone(), CategoriesDataTable))
				cln.InitVars()
				Return cln
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
				Return New CategoriesDataTable()
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Friend Sub InitVars()
				Me.columnCategoryID = MyBase.Columns("CategoryID")
				Me.columnCategoryName = MyBase.Columns("CategoryName")
				Me.columnDescription = MyBase.Columns("Description")
				Me.columnPicture = MyBase.Columns("Picture")
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Private Sub InitClass()
				Me.columnCategoryID = New Global.System.Data.DataColumn("CategoryID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnCategoryID)
				Me.columnCategoryName = New Global.System.Data.DataColumn("CategoryName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnCategoryName)
				Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnDescription)
				Me.columnPicture = New Global.System.Data.DataColumn("Picture", GetType(Byte() ), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnPicture)
				Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() { Me.columnCategoryID}, True))
				Me.columnCategoryID.AutoIncrement = True
				Me.columnCategoryID.AllowDBNull = False
				Me.columnCategoryID.Unique = True
				Me.columnCategoryName.MaxLength = 15
				Me.columnDescription.MaxLength = 536870910
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function NewCategoriesRow() As CategoriesRow
				Return (CType(Me.NewRow(), CategoriesRow))
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
				Return New CategoriesRow(builder)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Protected Overrides Function GetRowType() As Global.System.Type
				Return GetType(CategoriesRow)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowChanged(e)
				If (Not Me.CategoriesRowChangedEvent Is Nothing) Then
					RaiseEvent CategoriesRowChanged(Me, New CategoriesRowChangeEvent((CType(e.Row, CategoriesRow)), e.Action))
				End If
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowChanging(e)
				If (Not Me.CategoriesRowChangingEvent Is Nothing) Then
					RaiseEvent CategoriesRowChanging(Me, New CategoriesRowChangeEvent((CType(e.Row, CategoriesRow)), e.Action))
				End If
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowDeleted(e)
				If (Not Me.CategoriesRowDeletedEvent Is Nothing) Then
					RaiseEvent CategoriesRowDeleted(Me, New CategoriesRowChangeEvent((CType(e.Row, CategoriesRow)), e.Action))
				End If
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowDeleting(e)
				If (Not Me.CategoriesRowDeletingEvent Is Nothing) Then
					RaiseEvent CategoriesRowDeleting(Me, New CategoriesRowChangeEvent((CType(e.Row, CategoriesRow)), e.Action))
				End If
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub RemoveCategoriesRow(ByVal row As CategoriesRow)
				Me.Rows.Remove(row)
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
				Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
				Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
				Dim ds As NwindDataSet = New NwindDataSet()
				Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
				any1.Namespace = "http://www.w3.org/2001/XMLSchema"
				any1.MinOccurs = New Decimal(0)
				any1.MaxOccurs = Decimal.MaxValue
				any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
				sequence.Items.Add(any1)
				Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
				any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
				any2.MinOccurs = New Decimal(1)
				any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
				sequence.Items.Add(any2)
				Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
				attribute1.Name = "namespace"
				attribute1.FixedValue = ds.Namespace
				type.Attributes.Add(attribute1)
				Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
				attribute2.Name = "tableTypeName"
				attribute2.FixedValue = "CategoriesDataTable"
				type.Attributes.Add(attribute2)
				type.Particle = sequence
				Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
				If xs.Contains(dsSchema.TargetNamespace) Then
					Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
					Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
					Try
						Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
						dsSchema.Write(s1)
						Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator()
						Do While schemas.MoveNext()
							schema = (CType(schemas.Current, Global.System.Xml.Schema.XmlSchema))
							s2.SetLength(0)
							schema.Write(s2)
							If (s1.Length = s2.Length) Then
								s1.Position = 0
								s2.Position = 0
								Do While ((s1.Position <> s1.Length) AndAlso (s1.ReadByte() = s2.ReadByte()))

								Loop
								If (s1.Position = s1.Length) Then
									Return type
								End If
							End If
						Loop
					Finally
						If (Not s1 Is Nothing) Then
							s1.Close()
						End If
						If (Not s2 Is Nothing) Then
							s2.Close()
						End If
					End Try
				End If
				xs.Add(dsSchema)
				Return type
			End Function
		End Class

		''' <summary>
		'''Represents the strongly named DataTable class.
		'''</summary>
		<Global.System.Serializable(), Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
		Public Partial Class CustomersDataTable
			Inherits Global.System.Data.TypedTableBase(Of CustomersRow)

			Private columnCustomerID As Global.System.Data.DataColumn

			Private columnCompanyName As Global.System.Data.DataColumn

			Private columnContactName As Global.System.Data.DataColumn

			Private columnContactTitle As Global.System.Data.DataColumn

			Private columnAddress As Global.System.Data.DataColumn

			Private columnCity As Global.System.Data.DataColumn

			Private columnRegion As Global.System.Data.DataColumn

			Private columnPostalCode As Global.System.Data.DataColumn

			Private columnCountry As Global.System.Data.DataColumn

			Private columnPhone As Global.System.Data.DataColumn

			Private columnFax As Global.System.Data.DataColumn

			Private columnBool As Global.System.Data.DataColumn

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub New()
				Me.TableName = "Customers"
				Me.BeginInit()
				Me.InitClass()
				Me.EndInit()
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Friend Sub New(ByVal table As Global.System.Data.DataTable)
				Me.TableName = table.TableName
				If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
					Me.CaseSensitive = table.CaseSensitive
				End If
				If (table.Locale.ToString() <> table.DataSet.Locale.ToString()) Then
					Me.Locale = table.Locale
				End If
				If (table.Namespace <> table.DataSet.Namespace) Then
					Me.Namespace = table.Namespace
				End If
				Me.Prefix = table.Prefix
				Me.MinimumCapacity = table.MinimumCapacity
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
				MyBase.New(info, context)
				Me.InitVars()
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property CustomerIDColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnCustomerID
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property CompanyNameColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnCompanyName
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property ContactNameColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnContactName
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property ContactTitleColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnContactTitle
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property AddressColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnAddress
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property CityColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnCity
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property RegionColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnRegion
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property PostalCodeColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnPostalCode
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property CountryColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnCountry
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property PhoneColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnPhone
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property FaxColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnFax
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property BoolColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnBool
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Browsable(False)> _
			Public ReadOnly Property Count() As Integer
				Get
					Return Me.Rows.Count
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Default Property Item(ByVal index As Integer) As CustomersRow
				Get
					Return (CType(Me.Rows(index), CustomersRow))
				End Get
			End Property

			<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Event CustomersRowChanging As CustomersRowChangeEventHandler

			<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Event CustomersRowChanged As CustomersRowChangeEventHandler

			<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Event CustomersRowDeleting As CustomersRowChangeEventHandler

			<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Event CustomersRowDeleted As CustomersRowChangeEventHandler

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub AddCustomersRow(ByVal row As CustomersRow)
				Me.Rows.Add(row)
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function AddCustomersRow(ByVal CustomerID As String, ByVal CompanyName As String, ByVal ContactName As String, ByVal ContactTitle As String, ByVal Address As String, ByVal City As String, ByVal Region As String, ByVal PostalCode As String, ByVal Country As String, ByVal Phone As String, ByVal Fax As String, ByVal Bool As Boolean) As CustomersRow
				Dim rowCustomersRow As CustomersRow = (CType(Me.NewRow(), CustomersRow))
				Dim columnValuesArray As Object() = New Object() { CustomerID, CompanyName, ContactName, ContactTitle, Address, City, Region, PostalCode, Country, Phone, Fax, Bool}
				rowCustomersRow.ItemArray = columnValuesArray
				Me.Rows.Add(rowCustomersRow)
				Return rowCustomersRow
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function FindByCustomerID(ByVal CustomerID As String) As CustomersRow
				Return (CType(Me.Rows.Find(New Object() { CustomerID}), CustomersRow))
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Overrides Function Clone() As Global.System.Data.DataTable
				Dim cln As CustomersDataTable = (CType(MyBase.Clone(), CustomersDataTable))
				cln.InitVars()
				Return cln
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
				Return New CustomersDataTable()
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Friend Sub InitVars()
				Me.columnCustomerID = MyBase.Columns("CustomerID")
				Me.columnCompanyName = MyBase.Columns("CompanyName")
				Me.columnContactName = MyBase.Columns("ContactName")
				Me.columnContactTitle = MyBase.Columns("ContactTitle")
				Me.columnAddress = MyBase.Columns("Address")
				Me.columnCity = MyBase.Columns("City")
				Me.columnRegion = MyBase.Columns("Region")
				Me.columnPostalCode = MyBase.Columns("PostalCode")
				Me.columnCountry = MyBase.Columns("Country")
				Me.columnPhone = MyBase.Columns("Phone")
				Me.columnFax = MyBase.Columns("Fax")
				Me.columnBool = MyBase.Columns("Bool")
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Private Sub InitClass()
				Me.columnCustomerID = New Global.System.Data.DataColumn("CustomerID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnCustomerID)
				Me.columnCompanyName = New Global.System.Data.DataColumn("CompanyName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnCompanyName)
				Me.columnContactName = New Global.System.Data.DataColumn("ContactName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnContactName)
				Me.columnContactTitle = New Global.System.Data.DataColumn("ContactTitle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnContactTitle)
				Me.columnAddress = New Global.System.Data.DataColumn("Address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnAddress)
				Me.columnCity = New Global.System.Data.DataColumn("City", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnCity)
				Me.columnRegion = New Global.System.Data.DataColumn("Region", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnRegion)
				Me.columnPostalCode = New Global.System.Data.DataColumn("PostalCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnPostalCode)
				Me.columnCountry = New Global.System.Data.DataColumn("Country", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnCountry)
				Me.columnPhone = New Global.System.Data.DataColumn("Phone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnPhone)
				Me.columnFax = New Global.System.Data.DataColumn("Fax", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnFax)
				Me.columnBool = New Global.System.Data.DataColumn("Bool", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnBool)
				Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() { Me.columnCustomerID}, True))
				Me.columnCustomerID.AllowDBNull = False
				Me.columnCustomerID.Unique = True
				Me.columnCustomerID.MaxLength = 5
				Me.columnCompanyName.MaxLength = 40
				Me.columnContactName.MaxLength = 30
				Me.columnContactTitle.MaxLength = 30
				Me.columnAddress.MaxLength = 60
				Me.columnCity.MaxLength = 15
				Me.columnRegion.MaxLength = 15
				Me.columnPostalCode.MaxLength = 10
				Me.columnCountry.MaxLength = 15
				Me.columnPhone.MaxLength = 24
				Me.columnFax.MaxLength = 24
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function NewCustomersRow() As CustomersRow
				Return (CType(Me.NewRow(), CustomersRow))
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
				Return New CustomersRow(builder)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Protected Overrides Function GetRowType() As Global.System.Type
				Return GetType(CustomersRow)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowChanged(e)
				If (Not Me.CustomersRowChangedEvent Is Nothing) Then
					RaiseEvent CustomersRowChanged(Me, New CustomersRowChangeEvent((CType(e.Row, CustomersRow)), e.Action))
				End If
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowChanging(e)
				If (Not Me.CustomersRowChangingEvent Is Nothing) Then
					RaiseEvent CustomersRowChanging(Me, New CustomersRowChangeEvent((CType(e.Row, CustomersRow)), e.Action))
				End If
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowDeleted(e)
				If (Not Me.CustomersRowDeletedEvent Is Nothing) Then
					RaiseEvent CustomersRowDeleted(Me, New CustomersRowChangeEvent((CType(e.Row, CustomersRow)), e.Action))
				End If
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowDeleting(e)
				If (Not Me.CustomersRowDeletingEvent Is Nothing) Then
					RaiseEvent CustomersRowDeleting(Me, New CustomersRowChangeEvent((CType(e.Row, CustomersRow)), e.Action))
				End If
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub RemoveCustomersRow(ByVal row As CustomersRow)
				Me.Rows.Remove(row)
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
				Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
				Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
				Dim ds As NwindDataSet = New NwindDataSet()
				Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
				any1.Namespace = "http://www.w3.org/2001/XMLSchema"
				any1.MinOccurs = New Decimal(0)
				any1.MaxOccurs = Decimal.MaxValue
				any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
				sequence.Items.Add(any1)
				Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
				any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
				any2.MinOccurs = New Decimal(1)
				any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
				sequence.Items.Add(any2)
				Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
				attribute1.Name = "namespace"
				attribute1.FixedValue = ds.Namespace
				type.Attributes.Add(attribute1)
				Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
				attribute2.Name = "tableTypeName"
				attribute2.FixedValue = "CustomersDataTable"
				type.Attributes.Add(attribute2)
				type.Particle = sequence
				Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
				If xs.Contains(dsSchema.TargetNamespace) Then
					Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
					Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
					Try
						Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
						dsSchema.Write(s1)
						Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator()
						Do While schemas.MoveNext()
							schema = (CType(schemas.Current, Global.System.Xml.Schema.XmlSchema))
							s2.SetLength(0)
							schema.Write(s2)
							If (s1.Length = s2.Length) Then
								s1.Position = 0
								s2.Position = 0
								Do While ((s1.Position <> s1.Length) AndAlso (s1.ReadByte() = s2.ReadByte()))

								Loop
								If (s1.Position = s1.Length) Then
									Return type
								End If
							End If
						Loop
					Finally
						If (Not s1 Is Nothing) Then
							s1.Close()
						End If
						If (Not s2 Is Nothing) Then
							s2.Close()
						End If
					End Try
				End If
				xs.Add(dsSchema)
				Return type
			End Function
		End Class

		''' <summary>
		'''Represents the strongly named DataTable class.
		'''</summary>
		<Global.System.Serializable(), Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
		Public Partial Class EmployeesDataTable
			Inherits Global.System.Data.TypedTableBase(Of EmployeesRow)

			Private columnEmployeeID As Global.System.Data.DataColumn

			Private columnLastName As Global.System.Data.DataColumn

			Private columnFirstName As Global.System.Data.DataColumn

			Private columnTitle As Global.System.Data.DataColumn

			Private columnTitleOfCourtesy As Global.System.Data.DataColumn

			Private columnBirthDate As Global.System.Data.DataColumn

			Private columnHireDate As Global.System.Data.DataColumn

			Private columnAddress As Global.System.Data.DataColumn

			Private columnCity As Global.System.Data.DataColumn

			Private columnRegion As Global.System.Data.DataColumn

			Private columnPostalCode As Global.System.Data.DataColumn

			Private columnCountry As Global.System.Data.DataColumn

			Private columnHomePhone As Global.System.Data.DataColumn

			Private columnExtension As Global.System.Data.DataColumn

			Private columnPhoto As Global.System.Data.DataColumn

			Private columnNotes As Global.System.Data.DataColumn

			Private columnReportsTo As Global.System.Data.DataColumn

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub New()
				Me.TableName = "Employees"
				Me.BeginInit()
				Me.InitClass()
				Me.EndInit()
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Friend Sub New(ByVal table As Global.System.Data.DataTable)
				Me.TableName = table.TableName
				If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
					Me.CaseSensitive = table.CaseSensitive
				End If
				If (table.Locale.ToString() <> table.DataSet.Locale.ToString()) Then
					Me.Locale = table.Locale
				End If
				If (table.Namespace <> table.DataSet.Namespace) Then
					Me.Namespace = table.Namespace
				End If
				Me.Prefix = table.Prefix
				Me.MinimumCapacity = table.MinimumCapacity
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
				MyBase.New(info, context)
				Me.InitVars()
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property EmployeeIDColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnEmployeeID
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property LastNameColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnLastName
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property FirstNameColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnFirstName
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property TitleColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnTitle
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property TitleOfCourtesyColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnTitleOfCourtesy
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property BirthDateColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnBirthDate
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property HireDateColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnHireDate
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property AddressColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnAddress
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property CityColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnCity
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property RegionColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnRegion
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property PostalCodeColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnPostalCode
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property CountryColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnCountry
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property HomePhoneColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnHomePhone
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property ExtensionColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnExtension
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property PhotoColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnPhoto
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property NotesColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnNotes
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property ReportsToColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnReportsTo
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Browsable(False)> _
			Public ReadOnly Property Count() As Integer
				Get
					Return Me.Rows.Count
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Default Property Item(ByVal index As Integer) As EmployeesRow
				Get
					Return (CType(Me.Rows(index), EmployeesRow))
				End Get
			End Property

			<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Event EmployeesRowChanging As EmployeesRowChangeEventHandler

			<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Event EmployeesRowChanged As EmployeesRowChangeEventHandler

			<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Event EmployeesRowDeleting As EmployeesRowChangeEventHandler

			<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Event EmployeesRowDeleted As EmployeesRowChangeEventHandler

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub AddEmployeesRow(ByVal row As EmployeesRow)
				Me.Rows.Add(row)
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function AddEmployeesRow(ByVal LastName As String, ByVal FirstName As String, ByVal Title As String, ByVal TitleOfCourtesy As String, ByVal BirthDate As System.DateTime, ByVal HireDate As System.DateTime, ByVal Address As String, ByVal City As String, ByVal Region As String, ByVal PostalCode As String, ByVal Country As String, ByVal HomePhone As String, ByVal Extension As String, ByVal Photo As String, ByVal Notes As String, ByVal ReportsTo As Integer) As EmployeesRow
				Dim rowEmployeesRow As EmployeesRow = (CType(Me.NewRow(), EmployeesRow))
				Dim columnValuesArray As Object() = New Object() { Nothing, LastName, FirstName, Title, TitleOfCourtesy, BirthDate, HireDate, Address, City, Region, PostalCode, Country, HomePhone, Extension, Photo, Notes, ReportsTo}
				rowEmployeesRow.ItemArray = columnValuesArray
				Me.Rows.Add(rowEmployeesRow)
				Return rowEmployeesRow
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function FindByEmployeeID(ByVal EmployeeID As Integer) As EmployeesRow
				Return (CType(Me.Rows.Find(New Object() { EmployeeID}), EmployeesRow))
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Overrides Function Clone() As Global.System.Data.DataTable
				Dim cln As EmployeesDataTable = (CType(MyBase.Clone(), EmployeesDataTable))
				cln.InitVars()
				Return cln
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
				Return New EmployeesDataTable()
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Friend Sub InitVars()
				Me.columnEmployeeID = MyBase.Columns("EmployeeID")
				Me.columnLastName = MyBase.Columns("LastName")
				Me.columnFirstName = MyBase.Columns("FirstName")
				Me.columnTitle = MyBase.Columns("Title")
				Me.columnTitleOfCourtesy = MyBase.Columns("TitleOfCourtesy")
				Me.columnBirthDate = MyBase.Columns("BirthDate")
				Me.columnHireDate = MyBase.Columns("HireDate")
				Me.columnAddress = MyBase.Columns("Address")
				Me.columnCity = MyBase.Columns("City")
				Me.columnRegion = MyBase.Columns("Region")
				Me.columnPostalCode = MyBase.Columns("PostalCode")
				Me.columnCountry = MyBase.Columns("Country")
				Me.columnHomePhone = MyBase.Columns("HomePhone")
				Me.columnExtension = MyBase.Columns("Extension")
				Me.columnPhoto = MyBase.Columns("Photo")
				Me.columnNotes = MyBase.Columns("Notes")
				Me.columnReportsTo = MyBase.Columns("ReportsTo")
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Private Sub InitClass()
				Me.columnEmployeeID = New Global.System.Data.DataColumn("EmployeeID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnEmployeeID)
				Me.columnLastName = New Global.System.Data.DataColumn("LastName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnLastName)
				Me.columnFirstName = New Global.System.Data.DataColumn("FirstName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnFirstName)
				Me.columnTitle = New Global.System.Data.DataColumn("Title", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnTitle)
				Me.columnTitleOfCourtesy = New Global.System.Data.DataColumn("TitleOfCourtesy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnTitleOfCourtesy)
				Me.columnBirthDate = New Global.System.Data.DataColumn("BirthDate", GetType(Global.System.DateTime), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnBirthDate)
				Me.columnHireDate = New Global.System.Data.DataColumn("HireDate", GetType(Global.System.DateTime), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnHireDate)
				Me.columnAddress = New Global.System.Data.DataColumn("Address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnAddress)
				Me.columnCity = New Global.System.Data.DataColumn("City", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnCity)
				Me.columnRegion = New Global.System.Data.DataColumn("Region", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnRegion)
				Me.columnPostalCode = New Global.System.Data.DataColumn("PostalCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnPostalCode)
				Me.columnCountry = New Global.System.Data.DataColumn("Country", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnCountry)
				Me.columnHomePhone = New Global.System.Data.DataColumn("HomePhone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnHomePhone)
				Me.columnExtension = New Global.System.Data.DataColumn("Extension", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnExtension)
				Me.columnPhoto = New Global.System.Data.DataColumn("Photo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnPhoto)
				Me.columnNotes = New Global.System.Data.DataColumn("Notes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnNotes)
				Me.columnReportsTo = New Global.System.Data.DataColumn("ReportsTo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnReportsTo)
				Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() { Me.columnEmployeeID}, True))
				Me.columnEmployeeID.AutoIncrement = True
				Me.columnEmployeeID.AllowDBNull = False
				Me.columnEmployeeID.Unique = True
				Me.columnLastName.MaxLength = 20
				Me.columnFirstName.MaxLength = 10
				Me.columnTitle.MaxLength = 30
				Me.columnTitleOfCourtesy.MaxLength = 25
				Me.columnAddress.MaxLength = 60
				Me.columnCity.MaxLength = 15
				Me.columnRegion.MaxLength = 15
				Me.columnPostalCode.MaxLength = 10
				Me.columnCountry.MaxLength = 15
				Me.columnHomePhone.MaxLength = 24
				Me.columnExtension.MaxLength = 4
				Me.columnPhoto.MaxLength = 255
				Me.columnNotes.MaxLength = 536870910
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function NewEmployeesRow() As EmployeesRow
				Return (CType(Me.NewRow(), EmployeesRow))
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
				Return New EmployeesRow(builder)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Protected Overrides Function GetRowType() As Global.System.Type
				Return GetType(EmployeesRow)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowChanged(e)
				If (Not Me.EmployeesRowChangedEvent Is Nothing) Then
					RaiseEvent EmployeesRowChanged(Me, New EmployeesRowChangeEvent((CType(e.Row, EmployeesRow)), e.Action))
				End If
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowChanging(e)
				If (Not Me.EmployeesRowChangingEvent Is Nothing) Then
					RaiseEvent EmployeesRowChanging(Me, New EmployeesRowChangeEvent((CType(e.Row, EmployeesRow)), e.Action))
				End If
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowDeleted(e)
				If (Not Me.EmployeesRowDeletedEvent Is Nothing) Then
					RaiseEvent EmployeesRowDeleted(Me, New EmployeesRowChangeEvent((CType(e.Row, EmployeesRow)), e.Action))
				End If
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowDeleting(e)
				If (Not Me.EmployeesRowDeletingEvent Is Nothing) Then
					RaiseEvent EmployeesRowDeleting(Me, New EmployeesRowChangeEvent((CType(e.Row, EmployeesRow)), e.Action))
				End If
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub RemoveEmployeesRow(ByVal row As EmployeesRow)
				Me.Rows.Remove(row)
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
				Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
				Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
				Dim ds As NwindDataSet = New NwindDataSet()
				Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
				any1.Namespace = "http://www.w3.org/2001/XMLSchema"
				any1.MinOccurs = New Decimal(0)
				any1.MaxOccurs = Decimal.MaxValue
				any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
				sequence.Items.Add(any1)
				Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
				any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
				any2.MinOccurs = New Decimal(1)
				any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
				sequence.Items.Add(any2)
				Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
				attribute1.Name = "namespace"
				attribute1.FixedValue = ds.Namespace
				type.Attributes.Add(attribute1)
				Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
				attribute2.Name = "tableTypeName"
				attribute2.FixedValue = "EmployeesDataTable"
				type.Attributes.Add(attribute2)
				type.Particle = sequence
				Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
				If xs.Contains(dsSchema.TargetNamespace) Then
					Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
					Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
					Try
						Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
						dsSchema.Write(s1)
						Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator()
						Do While schemas.MoveNext()
							schema = (CType(schemas.Current, Global.System.Xml.Schema.XmlSchema))
							s2.SetLength(0)
							schema.Write(s2)
							If (s1.Length = s2.Length) Then
								s1.Position = 0
								s2.Position = 0
								Do While ((s1.Position <> s1.Length) AndAlso (s1.ReadByte() = s2.ReadByte()))

								Loop
								If (s1.Position = s1.Length) Then
									Return type
								End If
							End If
						Loop
					Finally
						If (Not s1 Is Nothing) Then
							s1.Close()
						End If
						If (Not s2 Is Nothing) Then
							s2.Close()
						End If
					End Try
				End If
				xs.Add(dsSchema)
				Return type
			End Function
		End Class

		''' <summary>
		'''Represents strongly named DataRow class.
		'''</summary>
		Public Partial Class CarsRow
			Inherits Global.System.Data.DataRow

			Private tableCars As CarsDataTable

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
				MyBase.New(rb)
				Me.tableCars = (CType(Me.Table, CarsDataTable))
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property Id() As Integer
				Get
					Try
						Return (CInt(Fix(Me(Me.tableCars.IdColumn))))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Id' in table 'Cars' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableCars.IdColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property Picture_Name() As String
				Get
					Try
						Return (CStr(Me(Me.tableCars.Picture_NameColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Picture Name' in table 'Cars' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableCars.Picture_NameColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property KBytes() As Decimal
				Get
					Try
						Return (CDec(Me(Me.tableCars.KBytesColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'KBytes' in table 'Cars' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableCars.KBytesColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property [Date]() As System.DateTime
				Get
					Try
						Return (CType(Me(Me.tableCars.DateColumn), Global.System.DateTime))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Date' in table 'Cars' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableCars.DateColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property BMP() As Boolean
				Get
					Try
						Return (CBool(Me(Me.tableCars.BMPColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'BMP' in table 'Cars' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableCars.BMPColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property Picture() As Byte()
				Get
					Try
						Return (CType(Me(Me.tableCars.PictureColumn), Byte()))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Picture' in table 'Cars' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableCars.PictureColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property PersonID() As Integer
				Get
					Try
						Return (CInt(Fix(Me(Me.tableCars.PersonIDColumn))))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'PersonID' in table 'Cars' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableCars.PersonIDColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function IsIdNull() As Boolean
				Return Me.IsNull(Me.tableCars.IdColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub SetIdNull()
				Me(Me.tableCars.IdColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function IsPicture_NameNull() As Boolean
				Return Me.IsNull(Me.tableCars.Picture_NameColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub SetPicture_NameNull()
				Me(Me.tableCars.Picture_NameColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function IsKBytesNull() As Boolean
				Return Me.IsNull(Me.tableCars.KBytesColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub SetKBytesNull()
				Me(Me.tableCars.KBytesColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function IsDateNull() As Boolean
				Return Me.IsNull(Me.tableCars.DateColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub SetDateNull()
				Me(Me.tableCars.DateColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function IsBMPNull() As Boolean
				Return Me.IsNull(Me.tableCars.BMPColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub SetBMPNull()
				Me(Me.tableCars.BMPColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function IsPictureNull() As Boolean
				Return Me.IsNull(Me.tableCars.PictureColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub SetPictureNull()
				Me(Me.tableCars.PictureColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function IsPersonIDNull() As Boolean
				Return Me.IsNull(Me.tableCars.PersonIDColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub SetPersonIDNull()
				Me(Me.tableCars.PersonIDColumn) = Global.System.Convert.DBNull
			End Sub
		End Class

		''' <summary>
		'''Represents strongly named DataRow class.
		'''</summary>
		Public Partial Class CategoriesRow
			Inherits Global.System.Data.DataRow

			Private tableCategories As CategoriesDataTable

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
				MyBase.New(rb)
				Me.tableCategories = (CType(Me.Table, CategoriesDataTable))
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property CategoryID() As Integer
				Get
					Return (CInt(Fix(Me(Me.tableCategories.CategoryIDColumn))))
				End Get
				Set
					Me(Me.tableCategories.CategoryIDColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property CategoryName() As String
				Get
					Try
						Return (CStr(Me(Me.tableCategories.CategoryNameColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'CategoryName' in table 'Categories' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableCategories.CategoryNameColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property Description() As String
				Get
					Try
						Return (CStr(Me(Me.tableCategories.DescriptionColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'Categories' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableCategories.DescriptionColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property Picture() As Byte()
				Get
					Try
						Return (CType(Me(Me.tableCategories.PictureColumn), Byte()))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Picture' in table 'Categories' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableCategories.PictureColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function IsCategoryNameNull() As Boolean
				Return Me.IsNull(Me.tableCategories.CategoryNameColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub SetCategoryNameNull()
				Me(Me.tableCategories.CategoryNameColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function IsDescriptionNull() As Boolean
				Return Me.IsNull(Me.tableCategories.DescriptionColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub SetDescriptionNull()
				Me(Me.tableCategories.DescriptionColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function IsPictureNull() As Boolean
				Return Me.IsNull(Me.tableCategories.PictureColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub SetPictureNull()
				Me(Me.tableCategories.PictureColumn) = Global.System.Convert.DBNull
			End Sub
		End Class

		''' <summary>
		'''Represents strongly named DataRow class.
		'''</summary>
		Public Partial Class CustomersRow
			Inherits Global.System.Data.DataRow

			Private tableCustomers As CustomersDataTable

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
				MyBase.New(rb)
				Me.tableCustomers = (CType(Me.Table, CustomersDataTable))
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property CustomerID() As String
				Get
					Return (CStr(Me(Me.tableCustomers.CustomerIDColumn)))
				End Get
				Set
					Me(Me.tableCustomers.CustomerIDColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property CompanyName() As String
				Get
					Try
						Return (CStr(Me(Me.tableCustomers.CompanyNameColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'CompanyName' in table 'Customers' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableCustomers.CompanyNameColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property ContactName() As String
				Get
					Try
						Return (CStr(Me(Me.tableCustomers.ContactNameColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'ContactName' in table 'Customers' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableCustomers.ContactNameColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property ContactTitle() As String
				Get
					Try
						Return (CStr(Me(Me.tableCustomers.ContactTitleColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'ContactTitle' in table 'Customers' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableCustomers.ContactTitleColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property Address() As String
				Get
					Try
						Return (CStr(Me(Me.tableCustomers.AddressColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Address' in table 'Customers' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableCustomers.AddressColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property City() As String
				Get
					Try
						Return (CStr(Me(Me.tableCustomers.CityColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'City' in table 'Customers' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableCustomers.CityColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property Region() As String
				Get
					Try
						Return (CStr(Me(Me.tableCustomers.RegionColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Region' in table 'Customers' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableCustomers.RegionColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property PostalCode() As String
				Get
					Try
						Return (CStr(Me(Me.tableCustomers.PostalCodeColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'PostalCode' in table 'Customers' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableCustomers.PostalCodeColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property Country() As String
				Get
					Try
						Return (CStr(Me(Me.tableCustomers.CountryColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Country' in table 'Customers' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableCustomers.CountryColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property Phone() As String
				Get
					Try
						Return (CStr(Me(Me.tableCustomers.PhoneColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Phone' in table 'Customers' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableCustomers.PhoneColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property Fax() As String
				Get
					Try
						Return (CStr(Me(Me.tableCustomers.FaxColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Fax' in table 'Customers' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableCustomers.FaxColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property Bool() As Boolean
				Get
					Try
						Return (CBool(Me(Me.tableCustomers.BoolColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Bool' in table 'Customers' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableCustomers.BoolColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function IsCompanyNameNull() As Boolean
				Return Me.IsNull(Me.tableCustomers.CompanyNameColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub SetCompanyNameNull()
				Me(Me.tableCustomers.CompanyNameColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function IsContactNameNull() As Boolean
				Return Me.IsNull(Me.tableCustomers.ContactNameColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub SetContactNameNull()
				Me(Me.tableCustomers.ContactNameColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function IsContactTitleNull() As Boolean
				Return Me.IsNull(Me.tableCustomers.ContactTitleColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub SetContactTitleNull()
				Me(Me.tableCustomers.ContactTitleColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function IsAddressNull() As Boolean
				Return Me.IsNull(Me.tableCustomers.AddressColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub SetAddressNull()
				Me(Me.tableCustomers.AddressColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function IsCityNull() As Boolean
				Return Me.IsNull(Me.tableCustomers.CityColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub SetCityNull()
				Me(Me.tableCustomers.CityColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function IsRegionNull() As Boolean
				Return Me.IsNull(Me.tableCustomers.RegionColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub SetRegionNull()
				Me(Me.tableCustomers.RegionColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function IsPostalCodeNull() As Boolean
				Return Me.IsNull(Me.tableCustomers.PostalCodeColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub SetPostalCodeNull()
				Me(Me.tableCustomers.PostalCodeColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function IsCountryNull() As Boolean
				Return Me.IsNull(Me.tableCustomers.CountryColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub SetCountryNull()
				Me(Me.tableCustomers.CountryColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function IsPhoneNull() As Boolean
				Return Me.IsNull(Me.tableCustomers.PhoneColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub SetPhoneNull()
				Me(Me.tableCustomers.PhoneColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function IsFaxNull() As Boolean
				Return Me.IsNull(Me.tableCustomers.FaxColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub SetFaxNull()
				Me(Me.tableCustomers.FaxColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function IsBoolNull() As Boolean
				Return Me.IsNull(Me.tableCustomers.BoolColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub SetBoolNull()
				Me(Me.tableCustomers.BoolColumn) = Global.System.Convert.DBNull
			End Sub
		End Class

		''' <summary>
		'''Represents strongly named DataRow class.
		'''</summary>
		Public Partial Class EmployeesRow
			Inherits Global.System.Data.DataRow

			Private tableEmployees As EmployeesDataTable

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
				MyBase.New(rb)
				Me.tableEmployees = (CType(Me.Table, EmployeesDataTable))
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property EmployeeID() As Integer
				Get
					Return (CInt(Fix(Me(Me.tableEmployees.EmployeeIDColumn))))
				End Get
				Set
					Me(Me.tableEmployees.EmployeeIDColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property LastName() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.LastNameColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'LastName' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableEmployees.LastNameColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property FirstName() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.FirstNameColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'FirstName' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableEmployees.FirstNameColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property Title() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.TitleColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Title' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableEmployees.TitleColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property TitleOfCourtesy() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.TitleOfCourtesyColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'TitleOfCourtesy' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableEmployees.TitleOfCourtesyColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property BirthDate() As System.DateTime
				Get
					Try
						Return (CType(Me(Me.tableEmployees.BirthDateColumn), Global.System.DateTime))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'BirthDate' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableEmployees.BirthDateColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property HireDate() As System.DateTime
				Get
					Try
						Return (CType(Me(Me.tableEmployees.HireDateColumn), Global.System.DateTime))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'HireDate' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableEmployees.HireDateColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property Address() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.AddressColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Address' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableEmployees.AddressColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property City() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.CityColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'City' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableEmployees.CityColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property Region() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.RegionColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Region' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableEmployees.RegionColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property PostalCode() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.PostalCodeColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'PostalCode' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableEmployees.PostalCodeColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property Country() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.CountryColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Country' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableEmployees.CountryColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property HomePhone() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.HomePhoneColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'HomePhone' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableEmployees.HomePhoneColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property Extension() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.ExtensionColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Extension' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableEmployees.ExtensionColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property Photo() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.PhotoColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Photo' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableEmployees.PhotoColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property Notes() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.NotesColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Notes' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableEmployees.NotesColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property ReportsTo() As Integer
				Get
					Try
						Return (CInt(Fix(Me(Me.tableEmployees.ReportsToColumn))))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'ReportsTo' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableEmployees.ReportsToColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function IsLastNameNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.LastNameColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub SetLastNameNull()
				Me(Me.tableEmployees.LastNameColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function IsFirstNameNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.FirstNameColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub SetFirstNameNull()
				Me(Me.tableEmployees.FirstNameColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function IsTitleNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.TitleColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub SetTitleNull()
				Me(Me.tableEmployees.TitleColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function IsTitleOfCourtesyNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.TitleOfCourtesyColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub SetTitleOfCourtesyNull()
				Me(Me.tableEmployees.TitleOfCourtesyColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function IsBirthDateNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.BirthDateColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub SetBirthDateNull()
				Me(Me.tableEmployees.BirthDateColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function IsHireDateNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.HireDateColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub SetHireDateNull()
				Me(Me.tableEmployees.HireDateColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function IsAddressNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.AddressColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub SetAddressNull()
				Me(Me.tableEmployees.AddressColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function IsCityNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.CityColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub SetCityNull()
				Me(Me.tableEmployees.CityColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function IsRegionNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.RegionColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub SetRegionNull()
				Me(Me.tableEmployees.RegionColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function IsPostalCodeNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.PostalCodeColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub SetPostalCodeNull()
				Me(Me.tableEmployees.PostalCodeColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function IsCountryNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.CountryColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub SetCountryNull()
				Me(Me.tableEmployees.CountryColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function IsHomePhoneNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.HomePhoneColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub SetHomePhoneNull()
				Me(Me.tableEmployees.HomePhoneColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function IsExtensionNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.ExtensionColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub SetExtensionNull()
				Me(Me.tableEmployees.ExtensionColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function IsPhotoNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.PhotoColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub SetPhotoNull()
				Me(Me.tableEmployees.PhotoColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function IsNotesNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.NotesColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub SetNotesNull()
				Me(Me.tableEmployees.NotesColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function IsReportsToNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.ReportsToColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub SetReportsToNull()
				Me(Me.tableEmployees.ReportsToColumn) = Global.System.Convert.DBNull
			End Sub
		End Class

		''' <summary>
		'''Row event argument class
		'''</summary>
		<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Class CarsRowChangeEvent
			Inherits Global.System.EventArgs

			Private eventRow As CarsRow

			Private eventAction As Global.System.Data.DataRowAction

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub New(ByVal row As CarsRow, ByVal action As Global.System.Data.DataRowAction)
				Me.eventRow = row
				Me.eventAction = action
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property Row() As CarsRow
				Get
					Return Me.eventRow
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property Action() As Global.System.Data.DataRowAction
				Get
					Return Me.eventAction
				End Get
			End Property
		End Class

		''' <summary>
		'''Row event argument class
		'''</summary>
		<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Class CategoriesRowChangeEvent
			Inherits Global.System.EventArgs

			Private eventRow As CategoriesRow

			Private eventAction As Global.System.Data.DataRowAction

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub New(ByVal row As CategoriesRow, ByVal action As Global.System.Data.DataRowAction)
				Me.eventRow = row
				Me.eventAction = action
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property Row() As CategoriesRow
				Get
					Return Me.eventRow
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property Action() As Global.System.Data.DataRowAction
				Get
					Return Me.eventAction
				End Get
			End Property
		End Class

		''' <summary>
		'''Row event argument class
		'''</summary>
		<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Class CustomersRowChangeEvent
			Inherits Global.System.EventArgs

			Private eventRow As CustomersRow

			Private eventAction As Global.System.Data.DataRowAction

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub New(ByVal row As CustomersRow, ByVal action As Global.System.Data.DataRowAction)
				Me.eventRow = row
				Me.eventAction = action
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property Row() As CustomersRow
				Get
					Return Me.eventRow
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property Action() As Global.System.Data.DataRowAction
				Get
					Return Me.eventAction
				End Get
			End Property
		End Class

		''' <summary>
		'''Row event argument class
		'''</summary>
		<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Class EmployeesRowChangeEvent
			Inherits Global.System.EventArgs

			Private eventRow As EmployeesRow

			Private eventAction As Global.System.Data.DataRowAction

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub New(ByVal row As EmployeesRow, ByVal action As Global.System.Data.DataRowAction)
				Me.eventRow = row
				Me.eventAction = action
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property Row() As EmployeesRow
				Get
					Return Me.eventRow
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property Action() As Global.System.Data.DataRowAction
				Get
					Return Me.eventAction
				End Get
			End Property
		End Class
	End Class
End Namespace
Namespace GridEditingForm.NwindDataSetTableAdapters


	''' <summary>
	'''Represents the connection and commands used to retrieve and save data.
	'''</summary>
	<Global.System.ComponentModel.DesignerCategoryAttribute("code"), Global.System.ComponentModel.ToolboxItem(True), Global.System.ComponentModel.DataObjectAttribute(True), Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
	Public Partial Class CarsTableAdapter
		Inherits Global.System.ComponentModel.Component

		Private _adapter As Global.System.Data.OleDb.OleDbDataAdapter

		Private _connection As Global.System.Data.OleDb.OleDbConnection

		Private _commandCollection As Global.System.Data.OleDb.OleDbCommand()

		Private _clearBeforeFill As Boolean

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Sub New()
			Me.ClearBeforeFill = True
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
			Get
				If (Me._adapter Is Nothing) Then
					Me.InitAdapter()
				End If
				Return Me._adapter
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
			Get
				If (Me._connection Is Nothing) Then
					Me.InitConnection()
				End If
				Return Me._connection
			End Get
			Set
				Me._connection = Value
				If (Not Me.Adapter.InsertCommand Is Nothing) Then
					Me.Adapter.InsertCommand.Connection = Value
				End If
				If (Not Me.Adapter.DeleteCommand Is Nothing) Then
					Me.Adapter.DeleteCommand.Connection = Value
				End If
				If (Not Me.Adapter.UpdateCommand Is Nothing) Then
					Me.Adapter.UpdateCommand.Connection = Value
				End If
				Dim i As Integer = 0
				Do While (i < Me.CommandCollection.Length)
					If (Not Me.CommandCollection(i) Is Nothing) Then
						CType(Me.CommandCollection(i), Global.System.Data.OleDb.OleDbCommand).Connection = Value
					End If
					i = (i + 1)
				Loop
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
			Get
				If (Me._commandCollection Is Nothing) Then
					Me.InitCommandCollection()
				End If
				Return Me._commandCollection
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Property ClearBeforeFill() As Boolean
			Get
				Return Me._clearBeforeFill
			End Get
			Set
				Me._clearBeforeFill = Value
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Private Sub InitAdapter()
			Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
			Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
			tableMapping.SourceTable = "Table"
			tableMapping.DataSetTable = "Cars"
			tableMapping.ColumnMappings.Add("Id", "Id")
			tableMapping.ColumnMappings.Add("Picture Name", "Picture Name")
			tableMapping.ColumnMappings.Add("KBytes", "KBytes")
			tableMapping.ColumnMappings.Add("Date", "Date")
			tableMapping.ColumnMappings.Add("BMP", "BMP")
			tableMapping.ColumnMappings.Add("Picture", "Picture")
			tableMapping.ColumnMappings.Add("PersonID", "PersonID")
			Me._adapter.TableMappings.Add(tableMapping)
			Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
			Me._adapter.InsertCommand.Connection = Me.Connection
			Me._adapter.InsertCommand.CommandText = "INSERT INTO `Cars` (`Id`, `Picture Name`, `KBytes`, `Date`, `BMP`, `Picture`, `Pe" & "rsonID`) VALUES (?, ?, ?, ?, ?, ?, ?)"
			Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Id", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Id", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Picture_Name", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Picture Name", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("KBytes", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, (CByte(18)), (CByte(0)), "KBytes", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Date", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Date", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BMP", Global.System.Data.OleDb.OleDbType.Boolean, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "BMP", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Picture", Global.System.Data.OleDb.OleDbType.LongVarBinary, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Picture", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PersonID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PersonID", Global.System.Data.DataRowVersion.Current, False, Nothing))
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Private Sub InitConnection()
			Me._connection = New Global.System.Data.OleDb.OleDbConnection()
			Me._connection.ConnectionString = My.Settings.Default.NwindConnectionString
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Private Sub InitCommandCollection()
			Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0){}
			Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
			Me._commandCollection(0).Connection = Me.Connection
			Me._commandCollection(0).CommandText = "SELECT Id, [Picture Name], KBytes, [Date], BMP, Picture, PersonID FROM Cars"
			Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
		Public Overridable Function Fill(ByVal dataTable As NwindDataSet.CarsDataTable) As Integer
			Me.Adapter.SelectCommand = Me.CommandCollection(0)
			If (Me.ClearBeforeFill = True) Then
				dataTable.Clear()
			End If
			Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
			Return returnValue
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Select, True)> _
		Public Overridable Function GetData() As NwindDataSet.CarsDataTable
			Me.Adapter.SelectCommand = Me.CommandCollection(0)
			Dim dataTable As NwindDataSet.CarsDataTable = New NwindDataSet.CarsDataTable()
			Me.Adapter.Fill(dataTable)
			Return dataTable
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
		Public Overridable Function Update(ByVal dataTable As NwindDataSet.CarsDataTable) As Integer
			Return Me.Adapter.Update(dataTable)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
		Public Overridable Function Update(ByVal dataSet As NwindDataSet) As Integer
			Return Me.Adapter.Update(dataSet, "Cars")
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
		Public Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
			Return Me.Adapter.Update(New Global.System.Data.DataRow() { dataRow})
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
		Public Overridable Function Update(ByVal dataRows As Global.System.Data.DataRow()) As Integer
			Return Me.Adapter.Update(dataRows)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
		Public Overridable Function Insert(ByVal Id As Global.System.Nullable(Of Integer), ByVal Picture_Name As String, ByVal KBytes As Global.System.Nullable(Of Decimal), ByVal [Date] As Global.System.Nullable(Of Global.System.DateTime), ByVal BMP As Boolean, ByVal Picture As Byte(), ByVal PersonID As Global.System.Nullable(Of Integer)) As Integer
			If (Id.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(0).Value = (CInt(Fix(Id.Value)))
			Else
				Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
			End If
			If (Picture_Name Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(1).Value = (CStr(Picture_Name))
			End If
			If (KBytes.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(2).Value = (CDec(KBytes.Value))
			Else
				Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
			End If
			If ([Date].HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(3).Value = (CDate([Date].Value))
			Else
				Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
			End If
			Me.Adapter.InsertCommand.Parameters(4).Value = (CBool(BMP))
			If (Picture Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(5).Value = (CType(Picture, Byte()))
			End If
			If (PersonID.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(6).Value = (CInt(Fix(PersonID.Value)))
			Else
				Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
			End If
			Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
			If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
				Me.Adapter.InsertCommand.Connection.Open()
			End If
			Try
				Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery()
				Return returnValue
			Finally
				If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
					Me.Adapter.InsertCommand.Connection.Close()
				End If
			End Try
		End Function
	End Class

	''' <summary>
	'''Represents the connection and commands used to retrieve and save data.
	'''</summary>
	<Global.System.ComponentModel.DesignerCategoryAttribute("code"), Global.System.ComponentModel.ToolboxItem(True), Global.System.ComponentModel.DataObjectAttribute(True), Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
	Public Partial Class CategoriesTableAdapter
		Inherits Global.System.ComponentModel.Component

		Private _adapter As Global.System.Data.OleDb.OleDbDataAdapter

		Private _connection As Global.System.Data.OleDb.OleDbConnection

		Private _commandCollection As Global.System.Data.OleDb.OleDbCommand()

		Private _clearBeforeFill As Boolean

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Sub New()
			Me.ClearBeforeFill = True
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
			Get
				If (Me._adapter Is Nothing) Then
					Me.InitAdapter()
				End If
				Return Me._adapter
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
			Get
				If (Me._connection Is Nothing) Then
					Me.InitConnection()
				End If
				Return Me._connection
			End Get
			Set
				Me._connection = Value
				If (Not Me.Adapter.InsertCommand Is Nothing) Then
					Me.Adapter.InsertCommand.Connection = Value
				End If
				If (Not Me.Adapter.DeleteCommand Is Nothing) Then
					Me.Adapter.DeleteCommand.Connection = Value
				End If
				If (Not Me.Adapter.UpdateCommand Is Nothing) Then
					Me.Adapter.UpdateCommand.Connection = Value
				End If
				Dim i As Integer = 0
				Do While (i < Me.CommandCollection.Length)
					If (Not Me.CommandCollection(i) Is Nothing) Then
						CType(Me.CommandCollection(i), Global.System.Data.OleDb.OleDbCommand).Connection = Value
					End If
					i = (i + 1)
				Loop
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
			Get
				If (Me._commandCollection Is Nothing) Then
					Me.InitCommandCollection()
				End If
				Return Me._commandCollection
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Property ClearBeforeFill() As Boolean
			Get
				Return Me._clearBeforeFill
			End Get
			Set
				Me._clearBeforeFill = Value
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Private Sub InitAdapter()
			Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
			Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
			tableMapping.SourceTable = "Table"
			tableMapping.DataSetTable = "Categories"
			tableMapping.ColumnMappings.Add("CategoryID", "CategoryID")
			tableMapping.ColumnMappings.Add("CategoryName", "CategoryName")
			tableMapping.ColumnMappings.Add("Description", "Description")
			tableMapping.ColumnMappings.Add("Picture", "Picture")
			Me._adapter.TableMappings.Add(tableMapping)
			Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand()
			Me._adapter.DeleteCommand.Connection = Me.Connection
			Me._adapter.DeleteCommand.CommandText = "DELETE FROM `Categories` WHERE ((`CategoryID` = ?) AND ((? = 1 AND `CategoryName`" & " IS NULL) OR (`CategoryName` = ?)))"
			Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CategoryID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CategoryID", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CategoryName", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CategoryName", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CategoryName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CategoryName", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
			Me._adapter.InsertCommand.Connection = Me.Connection
			Me._adapter.InsertCommand.CommandText = "INSERT INTO `Categories` (`CategoryName`, `Description`, `Picture`) VALUES (?, ?," & " ?)"
			Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CategoryName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CategoryName", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Description", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Description", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Picture", Global.System.Data.OleDb.OleDbType.LongVarBinary, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Picture", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand()
			Me._adapter.UpdateCommand.Connection = Me.Connection
			Me._adapter.UpdateCommand.CommandText = "UPDATE `Categories` SET `CategoryName` = ?, `Description` = ?, `Picture` = ? WHER" & "E ((`CategoryID` = ?) AND ((? = 1 AND `CategoryName` IS NULL) OR (`CategoryName`" & " = ?)))"
			Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CategoryName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CategoryName", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Description", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Description", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Picture", Global.System.Data.OleDb.OleDbType.LongVarBinary, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Picture", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CategoryID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CategoryID", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CategoryName", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CategoryName", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CategoryName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CategoryName", Global.System.Data.DataRowVersion.Original, False, Nothing))
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Private Sub InitConnection()
			Me._connection = New Global.System.Data.OleDb.OleDbConnection()
			Me._connection.ConnectionString = My.Settings.Default.NwindConnectionString
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Private Sub InitCommandCollection()
			Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0){}
			Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
			Me._commandCollection(0).Connection = Me.Connection
			Me._commandCollection(0).CommandText = "SELECT        CategoryID, CategoryName, Description, Picture" & Constants.vbCrLf & "FROM            Cat" & "egories"
			Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
		Public Overridable Function Fill(ByVal dataTable As NwindDataSet.CategoriesDataTable) As Integer
			Me.Adapter.SelectCommand = Me.CommandCollection(0)
			If (Me.ClearBeforeFill = True) Then
				dataTable.Clear()
			End If
			Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
			Return returnValue
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Select, True)> _
		Public Overridable Function GetData() As NwindDataSet.CategoriesDataTable
			Me.Adapter.SelectCommand = Me.CommandCollection(0)
			Dim dataTable As NwindDataSet.CategoriesDataTable = New NwindDataSet.CategoriesDataTable()
			Me.Adapter.Fill(dataTable)
			Return dataTable
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
		Public Overridable Function Update(ByVal dataTable As NwindDataSet.CategoriesDataTable) As Integer
			Return Me.Adapter.Update(dataTable)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
		Public Overridable Function Update(ByVal dataSet As NwindDataSet) As Integer
			Return Me.Adapter.Update(dataSet, "Categories")
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
		Public Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
			Return Me.Adapter.Update(New Global.System.Data.DataRow() { dataRow})
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
		Public Overridable Function Update(ByVal dataRows As Global.System.Data.DataRow()) As Integer
			Return Me.Adapter.Update(dataRows)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
		Public Overridable Function Delete(ByVal Original_CategoryID As Integer, ByVal Original_CategoryName As String) As Integer
			Me.Adapter.DeleteCommand.Parameters(0).Value = (CInt(Fix(Original_CategoryID)))
			If (Original_CategoryName Is Nothing) Then
				Throw New Global.System.ArgumentNullException("Original_CategoryName")
			Else
				Me.Adapter.DeleteCommand.Parameters(1).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(2).Value = (CStr(Original_CategoryName))
			End If
			Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
			If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
				Me.Adapter.DeleteCommand.Connection.Open()
			End If
			Try
				Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery()
				Return returnValue
			Finally
				If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
					Me.Adapter.DeleteCommand.Connection.Close()
				End If
			End Try
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
		Public Overridable Function Insert(ByVal CategoryName As String, ByVal Description As String, ByVal Picture As Byte()) As Integer
			If (CategoryName Is Nothing) Then
				Throw New Global.System.ArgumentNullException("CategoryName")
			Else
				Me.Adapter.InsertCommand.Parameters(0).Value = (CStr(CategoryName))
			End If
			If (Description Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(1).Value = (CStr(Description))
			End If
			If (Picture Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(2).Value = (CType(Picture, Byte()))
			End If
			Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
			If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
				Me.Adapter.InsertCommand.Connection.Open()
			End If
			Try
				Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery()
				Return returnValue
			Finally
				If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
					Me.Adapter.InsertCommand.Connection.Close()
				End If
			End Try
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
		Public Overridable Function Update(ByVal CategoryName As String, ByVal Description As String, ByVal Picture As Byte(), ByVal Original_CategoryID As Integer, ByVal Original_CategoryName As String) As Integer
			If (CategoryName Is Nothing) Then
				Throw New Global.System.ArgumentNullException("CategoryName")
			Else
				Me.Adapter.UpdateCommand.Parameters(0).Value = (CStr(CategoryName))
			End If
			If (Description Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(1).Value = (CStr(Description))
			End If
			If (Picture Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(2).Value = (CType(Picture, Byte()))
			End If
			Me.Adapter.UpdateCommand.Parameters(3).Value = (CInt(Fix(Original_CategoryID)))
			If (Original_CategoryName Is Nothing) Then
				Throw New Global.System.ArgumentNullException("Original_CategoryName")
			Else
				Me.Adapter.UpdateCommand.Parameters(4).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(5).Value = (CStr(Original_CategoryName))
			End If
			Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
			If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
				Me.Adapter.UpdateCommand.Connection.Open()
			End If
			Try
				Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery()
				Return returnValue
			Finally
				If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
					Me.Adapter.UpdateCommand.Connection.Close()
				End If
			End Try
		End Function
	End Class

	''' <summary>
	'''Represents the connection and commands used to retrieve and save data.
	'''</summary>
	<Global.System.ComponentModel.DesignerCategoryAttribute("code"), Global.System.ComponentModel.ToolboxItem(True), Global.System.ComponentModel.DataObjectAttribute(True), Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
	Public Partial Class CustomersTableAdapter
		Inherits Global.System.ComponentModel.Component

		Private _adapter As Global.System.Data.OleDb.OleDbDataAdapter

		Private _connection As Global.System.Data.OleDb.OleDbConnection

		Private _commandCollection As Global.System.Data.OleDb.OleDbCommand()

		Private _clearBeforeFill As Boolean

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Sub New()
			Me.ClearBeforeFill = True
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
			Get
				If (Me._adapter Is Nothing) Then
					Me.InitAdapter()
				End If
				Return Me._adapter
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
			Get
				If (Me._connection Is Nothing) Then
					Me.InitConnection()
				End If
				Return Me._connection
			End Get
			Set
				Me._connection = Value
				If (Not Me.Adapter.InsertCommand Is Nothing) Then
					Me.Adapter.InsertCommand.Connection = Value
				End If
				If (Not Me.Adapter.DeleteCommand Is Nothing) Then
					Me.Adapter.DeleteCommand.Connection = Value
				End If
				If (Not Me.Adapter.UpdateCommand Is Nothing) Then
					Me.Adapter.UpdateCommand.Connection = Value
				End If
				Dim i As Integer = 0
				Do While (i < Me.CommandCollection.Length)
					If (Not Me.CommandCollection(i) Is Nothing) Then
						CType(Me.CommandCollection(i), Global.System.Data.OleDb.OleDbCommand).Connection = Value
					End If
					i = (i + 1)
				Loop
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
			Get
				If (Me._commandCollection Is Nothing) Then
					Me.InitCommandCollection()
				End If
				Return Me._commandCollection
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Property ClearBeforeFill() As Boolean
			Get
				Return Me._clearBeforeFill
			End Get
			Set
				Me._clearBeforeFill = Value
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Private Sub InitAdapter()
			Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
			Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
			tableMapping.SourceTable = "Table"
			tableMapping.DataSetTable = "Customers"
			tableMapping.ColumnMappings.Add("CustomerID", "CustomerID")
			tableMapping.ColumnMappings.Add("CompanyName", "CompanyName")
			tableMapping.ColumnMappings.Add("ContactName", "ContactName")
			tableMapping.ColumnMappings.Add("ContactTitle", "ContactTitle")
			tableMapping.ColumnMappings.Add("Address", "Address")
			tableMapping.ColumnMappings.Add("City", "City")
			tableMapping.ColumnMappings.Add("Region", "Region")
			tableMapping.ColumnMappings.Add("PostalCode", "PostalCode")
			tableMapping.ColumnMappings.Add("Country", "Country")
			tableMapping.ColumnMappings.Add("Phone", "Phone")
			tableMapping.ColumnMappings.Add("Fax", "Fax")
			tableMapping.ColumnMappings.Add("Bool", "Bool")
			Me._adapter.TableMappings.Add(tableMapping)
			Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand()
			Me._adapter.DeleteCommand.Connection = Me.Connection
			Me._adapter.DeleteCommand.CommandText = "DELETE FROM `Customers` WHERE ((`CustomerID` = ?) AND ((? = 1 AND `CompanyName` IS NULL) OR (`CompanyName` = ?)) AND ((? = 1 AND `ContactName` IS NULL) OR (`ContactName` = ?)) AND ((? = 1 AND `ContactTitle` IS NULL) OR (`ContactTitle` = ?)) AND ((? = 1 AND `Address` IS NULL) OR (`Address` = ?)) AND ((? = 1 AND `City` IS NULL) OR (`City` = ?)) AND ((? = 1 AND `Region` IS NULL) OR (`Region` = ?)) AND ((? = 1 AND `PostalCode` IS NULL) OR (`PostalCode` = ?)) AND ((? = 1 AND `Country` IS NULL) OR (`Country` = ?)) AND ((? = 1 AND `Phone` IS NULL) OR (`Phone` = ?)) AND ((? = 1 AND `Fax` IS NULL) OR (`Fax` = ?)) AND ((? = 1 AND `Bool` IS NULL) OR (`Bool` = ?)))"
			Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CustomerID", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CustomerID", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CompanyName", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CompanyName", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CompanyName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CompanyName", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ContactName", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ContactName", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ContactName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ContactName", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ContactTitle", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ContactTitle", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ContactTitle", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ContactTitle", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Address", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Address", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Address", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Address", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_City", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "City", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_City", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "City", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Region", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Region", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Region", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Region", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PostalCode", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PostalCode", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PostalCode", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PostalCode", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Country", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Country", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Country", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Country", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Phone", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Phone", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Phone", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Phone", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Fax", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Fax", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Fax", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Fax", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Bool", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Bool", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Bool", Global.System.Data.OleDb.OleDbType.Boolean, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Bool", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
			Me._adapter.InsertCommand.Connection = Me.Connection
			Me._adapter.InsertCommand.CommandText = "INSERT INTO `Customers` (`CustomerID`, `CompanyName`, `ContactName`, `ContactTitl" & "e`, `Address`, `City`, `Region`, `PostalCode`, `Country`, `Phone`, `Fax`, `Bool`" & ") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
			Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CustomerID", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CustomerID", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CompanyName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CompanyName", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ContactName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ContactName", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ContactTitle", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ContactTitle", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Address", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Address", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("City", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "City", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Region", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Region", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PostalCode", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PostalCode", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Country", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Country", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Phone", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Phone", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Fax", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Fax", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Bool", Global.System.Data.OleDb.OleDbType.Boolean, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Bool", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand()
			Me._adapter.UpdateCommand.Connection = Me.Connection
			Me._adapter.UpdateCommand.CommandText = "UPDATE `Customers` SET `CustomerID` = ?, `CompanyName` = ?, `ContactName` = ?, `ContactTitle` = ?, `Address` = ?, `City` = ?, `Region` = ?, `PostalCode` = ?, `Country` = ?, `Phone` = ?, `Fax` = ?, `Bool` = ? WHERE ((`CustomerID` = ?) AND ((? = 1 AND `CompanyName` IS NULL) OR (`CompanyName` = ?)) AND ((? = 1 AND `ContactName` IS NULL) OR (`ContactName` = ?)) AND ((? = 1 AND `ContactTitle` IS NULL) OR (`ContactTitle` = ?)) AND ((? = 1 AND `Address` IS NULL) OR (`Address` = ?)) AND ((? = 1 AND `City` IS NULL) OR (`City` = ?)) AND ((? = 1 AND `Region` IS NULL) OR (`Region` = ?)) AND ((? = 1 AND `PostalCode` IS NULL) OR (`PostalCode` = ?)) AND ((? = 1 AND `Country` IS NULL) OR (`Country` = ?)) AND ((? = 1 AND `Phone` IS NULL) OR (`Phone` = ?)) AND ((? = 1 AND `Fax` IS NULL) OR (`Fax` = ?)) AND ((? = 1 AND `Bool` IS NULL) OR (`Bool` = ?)))"
			Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CustomerID", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CustomerID", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CompanyName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CompanyName", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ContactName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ContactName", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ContactTitle", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ContactTitle", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Address", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Address", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("City", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "City", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Region", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Region", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PostalCode", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PostalCode", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Country", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Country", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Phone", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Phone", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Fax", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Fax", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Bool", Global.System.Data.OleDb.OleDbType.Boolean, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Bool", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CustomerID", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CustomerID", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CompanyName", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CompanyName", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CompanyName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CompanyName", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ContactName", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ContactName", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ContactName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ContactName", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ContactTitle", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ContactTitle", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ContactTitle", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ContactTitle", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Address", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Address", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Address", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Address", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_City", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "City", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_City", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "City", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Region", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Region", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Region", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Region", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PostalCode", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PostalCode", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PostalCode", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PostalCode", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Country", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Country", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Country", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Country", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Phone", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Phone", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Phone", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Phone", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Fax", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Fax", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Fax", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Fax", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Bool", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Bool", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Bool", Global.System.Data.OleDb.OleDbType.Boolean, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Bool", Global.System.Data.DataRowVersion.Original, False, Nothing))
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Private Sub InitConnection()
			Me._connection = New Global.System.Data.OleDb.OleDbConnection()
			Me._connection.ConnectionString = My.Settings.Default.NwindConnectionString
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Private Sub InitCommandCollection()
			Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0){}
			Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
			Me._commandCollection(0).Connection = Me.Connection
			Me._commandCollection(0).CommandText = "SELECT CustomerID, CompanyName, ContactName, ContactTitle, Address, City, Region," & " PostalCode, Country, Phone, Fax, Bool FROM Customers"
			Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
		Public Overridable Function Fill(ByVal dataTable As NwindDataSet.CustomersDataTable) As Integer
			Me.Adapter.SelectCommand = Me.CommandCollection(0)
			If (Me.ClearBeforeFill = True) Then
				dataTable.Clear()
			End If
			Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
			Return returnValue
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Select, True)> _
		Public Overridable Function GetData() As NwindDataSet.CustomersDataTable
			Me.Adapter.SelectCommand = Me.CommandCollection(0)
			Dim dataTable As NwindDataSet.CustomersDataTable = New NwindDataSet.CustomersDataTable()
			Me.Adapter.Fill(dataTable)
			Return dataTable
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
		Public Overridable Function Update(ByVal dataTable As NwindDataSet.CustomersDataTable) As Integer
			Return Me.Adapter.Update(dataTable)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
		Public Overridable Function Update(ByVal dataSet As NwindDataSet) As Integer
			Return Me.Adapter.Update(dataSet, "Customers")
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
		Public Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
			Return Me.Adapter.Update(New Global.System.Data.DataRow() { dataRow})
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
		Public Overridable Function Update(ByVal dataRows As Global.System.Data.DataRow()) As Integer
			Return Me.Adapter.Update(dataRows)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
		Public Overridable Function Delete(ByVal Original_CustomerID As String, ByVal Original_CompanyName As String, ByVal Original_ContactName As String, ByVal Original_ContactTitle As String, ByVal Original_Address As String, ByVal Original_City As String, ByVal Original_Region As String, ByVal Original_PostalCode As String, ByVal Original_Country As String, ByVal Original_Phone As String, ByVal Original_Fax As String, ByVal Original_Bool As Boolean) As Integer
			If (Original_CustomerID Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(0).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(0).Value = (CStr(Original_CustomerID))
			End If
			If (Original_CompanyName Is Nothing) Then
				Throw New Global.System.ArgumentNullException("Original_CompanyName")
			Else
				Me.Adapter.DeleteCommand.Parameters(1).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(2).Value = (CStr(Original_CompanyName))
			End If
			If (Original_ContactName Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(3).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(3).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(4).Value = (CStr(Original_ContactName))
			End If
			If (Original_ContactTitle Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(5).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(5).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(6).Value = (CStr(Original_ContactTitle))
			End If
			If (Original_Address Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(7).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(7).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(8).Value = (CStr(Original_Address))
			End If
			If (Original_City Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(9).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(9).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(10).Value = (CStr(Original_City))
			End If
			If (Original_Region Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(11).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(11).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(12).Value = (CStr(Original_Region))
			End If
			If (Original_PostalCode Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(13).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(13).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(14).Value = (CStr(Original_PostalCode))
			End If
			If (Original_Country Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(15).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(15).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(16).Value = (CStr(Original_Country))
			End If
			If (Original_Phone Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(17).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(17).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(18).Value = (CStr(Original_Phone))
			End If
			If (Original_Fax Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(19).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(19).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(20).Value = (CStr(Original_Fax))
			End If
			Me.Adapter.DeleteCommand.Parameters(21).Value = (CObj(0))
			Me.Adapter.DeleteCommand.Parameters(22).Value = (CBool(Original_Bool))
			Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
			If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
				Me.Adapter.DeleteCommand.Connection.Open()
			End If
			Try
				Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery()
				Return returnValue
			Finally
				If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
					Me.Adapter.DeleteCommand.Connection.Close()
				End If
			End Try
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
		Public Overridable Function Insert(ByVal CustomerID As String, ByVal CompanyName As String, ByVal ContactName As String, ByVal ContactTitle As String, ByVal Address As String, ByVal City As String, ByVal Region As String, ByVal PostalCode As String, ByVal Country As String, ByVal Phone As String, ByVal Fax As String, ByVal Bool As Boolean) As Integer
			If (CustomerID Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(0).Value = (CStr(CustomerID))
			End If
			If (CompanyName Is Nothing) Then
				Throw New Global.System.ArgumentNullException("CompanyName")
			Else
				Me.Adapter.InsertCommand.Parameters(1).Value = (CStr(CompanyName))
			End If
			If (ContactName Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(2).Value = (CStr(ContactName))
			End If
			If (ContactTitle Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(3).Value = (CStr(ContactTitle))
			End If
			If (Address Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(4).Value = (CStr(Address))
			End If
			If (City Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(5).Value = (CStr(City))
			End If
			If (Region Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(6).Value = (CStr(Region))
			End If
			If (PostalCode Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(7).Value = (CStr(PostalCode))
			End If
			If (Country Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(8).Value = (CStr(Country))
			End If
			If (Phone Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(9).Value = (CStr(Phone))
			End If
			If (Fax Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(10).Value = (CStr(Fax))
			End If
			Me.Adapter.InsertCommand.Parameters(11).Value = (CBool(Bool))
			Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
			If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
				Me.Adapter.InsertCommand.Connection.Open()
			End If
			Try
				Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery()
				Return returnValue
			Finally
				If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
					Me.Adapter.InsertCommand.Connection.Close()
				End If
			End Try
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
		Public Overridable Function Update(ByVal CustomerID As String, ByVal CompanyName As String, ByVal ContactName As String, ByVal ContactTitle As String, ByVal Address As String, ByVal City As String, ByVal Region As String, ByVal PostalCode As String, ByVal Country As String, ByVal Phone As String, ByVal Fax As String, ByVal Bool As Boolean, ByVal Original_CustomerID As String, ByVal Original_CompanyName As String, ByVal Original_ContactName As String, ByVal Original_ContactTitle As String, ByVal Original_Address As String, ByVal Original_City As String, ByVal Original_Region As String, ByVal Original_PostalCode As String, ByVal Original_Country As String, ByVal Original_Phone As String, ByVal Original_Fax As String, ByVal Original_Bool As Boolean) As Integer
			If (CustomerID Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(0).Value = (CStr(CustomerID))
			End If
			If (CompanyName Is Nothing) Then
				Throw New Global.System.ArgumentNullException("CompanyName")
			Else
				Me.Adapter.UpdateCommand.Parameters(1).Value = (CStr(CompanyName))
			End If
			If (ContactName Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(2).Value = (CStr(ContactName))
			End If
			If (ContactTitle Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(3).Value = (CStr(ContactTitle))
			End If
			If (Address Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(4).Value = (CStr(Address))
			End If
			If (City Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(5).Value = (CStr(City))
			End If
			If (Region Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(6).Value = (CStr(Region))
			End If
			If (PostalCode Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(7).Value = (CStr(PostalCode))
			End If
			If (Country Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(8).Value = (CStr(Country))
			End If
			If (Phone Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(9).Value = (CStr(Phone))
			End If
			If (Fax Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(10).Value = (CStr(Fax))
			End If
			Me.Adapter.UpdateCommand.Parameters(11).Value = (CBool(Bool))
			If (Original_CustomerID Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(12).Value = (CStr(Original_CustomerID))
			End If
			If (Original_CompanyName Is Nothing) Then
				Throw New Global.System.ArgumentNullException("Original_CompanyName")
			Else
				Me.Adapter.UpdateCommand.Parameters(13).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(14).Value = (CStr(Original_CompanyName))
			End If
			If (Original_ContactName Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(15).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(15).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(16).Value = (CStr(Original_ContactName))
			End If
			If (Original_ContactTitle Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(17).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(17).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(18).Value = (CStr(Original_ContactTitle))
			End If
			If (Original_Address Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(19).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(19).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(20).Value = (CStr(Original_Address))
			End If
			If (Original_City Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(21).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(21).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(22).Value = (CStr(Original_City))
			End If
			If (Original_Region Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(23).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(23).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(24).Value = (CStr(Original_Region))
			End If
			If (Original_PostalCode Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(25).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(25).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(26).Value = (CStr(Original_PostalCode))
			End If
			If (Original_Country Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(27).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(27).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(28).Value = (CStr(Original_Country))
			End If
			If (Original_Phone Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(29).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(29).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(30).Value = (CStr(Original_Phone))
			End If
			If (Original_Fax Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(31).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(31).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(32).Value = (CStr(Original_Fax))
			End If
			Me.Adapter.UpdateCommand.Parameters(33).Value = (CObj(0))
			Me.Adapter.UpdateCommand.Parameters(34).Value = (CBool(Original_Bool))
			Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
			If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
				Me.Adapter.UpdateCommand.Connection.Open()
			End If
			Try
				Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery()
				Return returnValue
			Finally
				If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
					Me.Adapter.UpdateCommand.Connection.Close()
				End If
			End Try
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
		Public Overridable Function Update(ByVal CompanyName As String, ByVal ContactName As String, ByVal ContactTitle As String, ByVal Address As String, ByVal City As String, ByVal Region As String, ByVal PostalCode As String, ByVal Country As String, ByVal Phone As String, ByVal Fax As String, ByVal Bool As Boolean, ByVal Original_CustomerID As String, ByVal Original_CompanyName As String, ByVal Original_ContactName As String, ByVal Original_ContactTitle As String, ByVal Original_Address As String, ByVal Original_City As String, ByVal Original_Region As String, ByVal Original_PostalCode As String, ByVal Original_Country As String, ByVal Original_Phone As String, ByVal Original_Fax As String, ByVal Original_Bool As Boolean) As Integer
			Return Me.Update(Original_CustomerID, CompanyName, ContactName, ContactTitle, Address, City, Region, PostalCode, Country, Phone, Fax, Bool, Original_CustomerID, Original_CompanyName, Original_ContactName, Original_ContactTitle, Original_Address, Original_City, Original_Region, Original_PostalCode, Original_Country, Original_Phone, Original_Fax, Original_Bool)
		End Function
	End Class

	''' <summary>
	'''Represents the connection and commands used to retrieve and save data.
	'''</summary>
	<Global.System.ComponentModel.DesignerCategoryAttribute("code"), Global.System.ComponentModel.ToolboxItem(True), Global.System.ComponentModel.DataObjectAttribute(True), Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
	Public Partial Class EmployeesTableAdapter
		Inherits Global.System.ComponentModel.Component

		Private _adapter As Global.System.Data.OleDb.OleDbDataAdapter

		Private _connection As Global.System.Data.OleDb.OleDbConnection

		Private _commandCollection As Global.System.Data.OleDb.OleDbCommand()

		Private _clearBeforeFill As Boolean

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Sub New()
			Me.ClearBeforeFill = True
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
			Get
				If (Me._adapter Is Nothing) Then
					Me.InitAdapter()
				End If
				Return Me._adapter
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
			Get
				If (Me._connection Is Nothing) Then
					Me.InitConnection()
				End If
				Return Me._connection
			End Get
			Set
				Me._connection = Value
				If (Not Me.Adapter.InsertCommand Is Nothing) Then
					Me.Adapter.InsertCommand.Connection = Value
				End If
				If (Not Me.Adapter.DeleteCommand Is Nothing) Then
					Me.Adapter.DeleteCommand.Connection = Value
				End If
				If (Not Me.Adapter.UpdateCommand Is Nothing) Then
					Me.Adapter.UpdateCommand.Connection = Value
				End If
				Dim i As Integer = 0
				Do While (i < Me.CommandCollection.Length)
					If (Not Me.CommandCollection(i) Is Nothing) Then
						CType(Me.CommandCollection(i), Global.System.Data.OleDb.OleDbCommand).Connection = Value
					End If
					i = (i + 1)
				Loop
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
			Get
				If (Me._commandCollection Is Nothing) Then
					Me.InitCommandCollection()
				End If
				Return Me._commandCollection
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Property ClearBeforeFill() As Boolean
			Get
				Return Me._clearBeforeFill
			End Get
			Set
				Me._clearBeforeFill = Value
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Private Sub InitAdapter()
			Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
			Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
			tableMapping.SourceTable = "Table"
			tableMapping.DataSetTable = "Employees"
			tableMapping.ColumnMappings.Add("EmployeeID", "EmployeeID")
			tableMapping.ColumnMappings.Add("LastName", "LastName")
			tableMapping.ColumnMappings.Add("FirstName", "FirstName")
			tableMapping.ColumnMappings.Add("Title", "Title")
			tableMapping.ColumnMappings.Add("TitleOfCourtesy", "TitleOfCourtesy")
			tableMapping.ColumnMappings.Add("BirthDate", "BirthDate")
			tableMapping.ColumnMappings.Add("HireDate", "HireDate")
			tableMapping.ColumnMappings.Add("Address", "Address")
			tableMapping.ColumnMappings.Add("City", "City")
			tableMapping.ColumnMappings.Add("Region", "Region")
			tableMapping.ColumnMappings.Add("PostalCode", "PostalCode")
			tableMapping.ColumnMappings.Add("Country", "Country")
			tableMapping.ColumnMappings.Add("HomePhone", "HomePhone")
			tableMapping.ColumnMappings.Add("Extension", "Extension")
			tableMapping.ColumnMappings.Add("Photo", "Photo")
			tableMapping.ColumnMappings.Add("Notes", "Notes")
			tableMapping.ColumnMappings.Add("ReportsTo", "ReportsTo")
			Me._adapter.TableMappings.Add(tableMapping)
			Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand()
			Me._adapter.DeleteCommand.Connection = Me.Connection
			Me._adapter.DeleteCommand.CommandText = "DELETE FROM `Employees` WHERE ((`EmployeeID` = ?) AND ((? = 1 AND `LastName` IS NULL) OR (`LastName` = ?)) AND ((? = 1 AND `FirstName` IS NULL) OR (`FirstName` = ?)) AND ((? = 1 AND `Title` IS NULL) OR (`Title` = ?)) AND ((? = 1 AND `TitleOfCourtesy` IS NULL) OR (`TitleOfCourtesy` = ?)) AND ((? = 1 AND `BirthDate` IS NULL) OR (`BirthDate` = ?)) AND ((? = 1 AND `HireDate` IS NULL) OR (`HireDate` = ?)) AND ((? = 1 AND `Address` IS NULL) OR (`Address` = ?)) AND ((? = 1 AND `City` IS NULL) OR (`City` = ?)) AND ((? = 1 AND `Region` IS NULL) OR (`Region` = ?)) AND ((? = 1 AND `PostalCode` IS NULL) OR (`PostalCode` = ?)) AND ((? = 1 AND `Country` IS NULL) OR (`Country` = ?)) AND ((? = 1 AND `HomePhone` IS NULL) OR (`HomePhone` = ?)) AND ((? = 1 AND `Extension` IS NULL) OR (`Extension` = ?)) AND ((? = 1 AND `Photo` IS NULL) OR (`Photo` = ?)) AND ((? = 1 AND `ReportsTo` IS NULL) OR (`ReportsTo` = ?)))"
			Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_EmployeeID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "EmployeeID", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LastName", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "LastName", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LastName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "LastName", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_FirstName", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "FirstName", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_FirstName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "FirstName", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Title", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Title", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Title", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Title", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_TitleOfCourtesy", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "TitleOfCourtesy", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_TitleOfCourtesy", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "TitleOfCourtesy", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BirthDate", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "BirthDate", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BirthDate", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "BirthDate", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_HireDate", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "HireDate", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_HireDate", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "HireDate", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Address", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Address", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Address", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Address", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_City", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "City", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_City", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "City", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Region", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Region", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Region", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Region", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PostalCode", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PostalCode", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PostalCode", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PostalCode", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Country", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Country", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Country", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Country", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_HomePhone", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "HomePhone", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_HomePhone", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "HomePhone", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Extension", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Extension", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Extension", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Extension", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Photo", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Photo", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Photo", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Photo", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ReportsTo", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ReportsTo", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ReportsTo", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ReportsTo", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
			Me._adapter.InsertCommand.Connection = Me.Connection
			Me._adapter.InsertCommand.CommandText = "INSERT INTO `Employees` (`LastName`, `FirstName`, `Title`, `TitleOfCourtesy`, `BirthDate`, `HireDate`, `Address`, `City`, `Region`, `PostalCode`, `Country`, `HomePhone`, `Extension`, `Photo`, `Notes`, `ReportsTo`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
			Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LastName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "LastName", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FirstName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "FirstName", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Title", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Title", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TitleOfCourtesy", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "TitleOfCourtesy", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BirthDate", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "BirthDate", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("HireDate", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "HireDate", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Address", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Address", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("City", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "City", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Region", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Region", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PostalCode", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PostalCode", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Country", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Country", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("HomePhone", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "HomePhone", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Extension", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Extension", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Photo", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Photo", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Notes", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Notes", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ReportsTo", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ReportsTo", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand()
			Me._adapter.UpdateCommand.Connection = Me.Connection
			Me._adapter.UpdateCommand.CommandText = "UPDATE `Employees` SET `LastName` = ?, `FirstName` = ?, `Title` = ?, `TitleOfCourtesy` = ?, `BirthDate` = ?, `HireDate` = ?, `Address` = ?, `City` = ?, `Region` = ?, `PostalCode` = ?, `Country` = ?, `HomePhone` = ?, `Extension` = ?, `Photo` = ?, `Notes` = ?, `ReportsTo` = ? WHERE ((`EmployeeID` = ?) AND ((? = 1 AND `LastName` IS NULL) OR (`LastName` = ?)) AND ((? = 1 AND `FirstName` IS NULL) OR (`FirstName` = ?)) AND ((? = 1 AND `Title` IS NULL) OR (`Title` = ?)) AND ((? = 1 AND `TitleOfCourtesy` IS NULL) OR (`TitleOfCourtesy` = ?)) AND ((? = 1 AND `BirthDate` IS NULL) OR (`BirthDate` = ?)) AND ((? = 1 AND `HireDate` IS NULL) OR (`HireDate` = ?)) AND ((? = 1 AND `Address` IS NULL) OR (`Address` = ?)) AND ((? = 1 AND `City` IS NULL) OR (`City` = ?)) AND ((? = 1 AND `Region` IS NULL) OR (`Region` = ?)) AND ((? = 1 AND `PostalCode` IS NULL) OR (`PostalCode` = ?)) AND ((? = 1 AND `Country` IS NULL) OR (`Country` = ?)) AND ((? = 1 AND `HomePhone` IS NULL) OR (`HomePhone` = ?)) AND ((? = 1 AND `Extension` IS NULL) OR (`Extension` = ?)) AND ((? = 1 AND `Photo` IS NULL) OR (`Photo` = ?)) AND ((? = 1 AND `ReportsTo` IS NULL) OR (`ReportsTo` = ?)))"
			Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LastName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "LastName", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FirstName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "FirstName", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Title", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Title", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TitleOfCourtesy", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "TitleOfCourtesy", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BirthDate", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "BirthDate", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("HireDate", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "HireDate", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Address", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Address", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("City", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "City", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Region", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Region", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PostalCode", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PostalCode", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Country", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Country", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("HomePhone", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "HomePhone", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Extension", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Extension", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Photo", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Photo", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Notes", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Notes", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ReportsTo", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ReportsTo", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_EmployeeID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "EmployeeID", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LastName", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "LastName", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LastName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "LastName", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_FirstName", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "FirstName", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_FirstName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "FirstName", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Title", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Title", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Title", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Title", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_TitleOfCourtesy", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "TitleOfCourtesy", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_TitleOfCourtesy", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "TitleOfCourtesy", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BirthDate", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "BirthDate", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BirthDate", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "BirthDate", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_HireDate", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "HireDate", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_HireDate", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "HireDate", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Address", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Address", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Address", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Address", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_City", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "City", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_City", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "City", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Region", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Region", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Region", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Region", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PostalCode", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PostalCode", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PostalCode", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PostalCode", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Country", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Country", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Country", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Country", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_HomePhone", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "HomePhone", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_HomePhone", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "HomePhone", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Extension", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Extension", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Extension", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Extension", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Photo", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Photo", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Photo", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Photo", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ReportsTo", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ReportsTo", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ReportsTo", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ReportsTo", Global.System.Data.DataRowVersion.Original, False, Nothing))
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Private Sub InitConnection()
			Me._connection = New Global.System.Data.OleDb.OleDbConnection()
			Me._connection.ConnectionString = My.Settings.Default.NwindConnectionString
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Private Sub InitCommandCollection()
			Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0){}
			Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
			Me._commandCollection(0).Connection = Me.Connection
			Me._commandCollection(0).CommandText = "SELECT EmployeeID, LastName, FirstName, Title, TitleOfCourtesy, BirthDate, HireDa" & "te, Address, City, Region, PostalCode, Country, HomePhone, Extension, Photo, Not" & "es, ReportsTo FROM Employees"
			Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
		Public Overridable Function Fill(ByVal dataTable As NwindDataSet.EmployeesDataTable) As Integer
			Me.Adapter.SelectCommand = Me.CommandCollection(0)
			If (Me.ClearBeforeFill = True) Then
				dataTable.Clear()
			End If
			Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
			Return returnValue
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Select, True)> _
		Public Overridable Function GetData() As NwindDataSet.EmployeesDataTable
			Me.Adapter.SelectCommand = Me.CommandCollection(0)
			Dim dataTable As NwindDataSet.EmployeesDataTable = New NwindDataSet.EmployeesDataTable()
			Me.Adapter.Fill(dataTable)
			Return dataTable
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
		Public Overridable Function Update(ByVal dataTable As NwindDataSet.EmployeesDataTable) As Integer
			Return Me.Adapter.Update(dataTable)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
		Public Overridable Function Update(ByVal dataSet As NwindDataSet) As Integer
			Return Me.Adapter.Update(dataSet, "Employees")
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
		Public Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
			Return Me.Adapter.Update(New Global.System.Data.DataRow() { dataRow})
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
		Public Overridable Function Update(ByVal dataRows As Global.System.Data.DataRow()) As Integer
			Return Me.Adapter.Update(dataRows)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
		Public Overridable Function Delete(ByVal Original_EmployeeID As Integer, ByVal Original_LastName As String, ByVal Original_FirstName As String, ByVal Original_Title As String, ByVal Original_TitleOfCourtesy As String, ByVal Original_BirthDate As Global.System.Nullable(Of Global.System.DateTime), ByVal Original_HireDate As Global.System.Nullable(Of Global.System.DateTime), ByVal Original_Address As String, ByVal Original_City As String, ByVal Original_Region As String, ByVal Original_PostalCode As String, ByVal Original_Country As String, ByVal Original_HomePhone As String, ByVal Original_Extension As String, ByVal Original_Photo As String, ByVal Original_ReportsTo As Global.System.Nullable(Of Integer)) As Integer
			Me.Adapter.DeleteCommand.Parameters(0).Value = (CInt(Fix(Original_EmployeeID)))
			If (Original_LastName Is Nothing) Then
				Throw New Global.System.ArgumentNullException("Original_LastName")
			Else
				Me.Adapter.DeleteCommand.Parameters(1).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(2).Value = (CStr(Original_LastName))
			End If
			If (Original_FirstName Is Nothing) Then
				Throw New Global.System.ArgumentNullException("Original_FirstName")
			Else
				Me.Adapter.DeleteCommand.Parameters(3).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(4).Value = (CStr(Original_FirstName))
			End If
			If (Original_Title Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(5).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(5).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(6).Value = (CStr(Original_Title))
			End If
			If (Original_TitleOfCourtesy Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(7).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(7).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(8).Value = (CStr(Original_TitleOfCourtesy))
			End If
			If (Original_BirthDate.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(9).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(10).Value = (CDate(Original_BirthDate.Value))
			Else
				Me.Adapter.DeleteCommand.Parameters(9).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
			End If
			If (Original_HireDate.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(11).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(12).Value = (CDate(Original_HireDate.Value))
			Else
				Me.Adapter.DeleteCommand.Parameters(11).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
			End If
			If (Original_Address Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(13).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(13).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(14).Value = (CStr(Original_Address))
			End If
			If (Original_City Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(15).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(15).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(16).Value = (CStr(Original_City))
			End If
			If (Original_Region Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(17).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(17).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(18).Value = (CStr(Original_Region))
			End If
			If (Original_PostalCode Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(19).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(19).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(20).Value = (CStr(Original_PostalCode))
			End If
			If (Original_Country Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(21).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(21).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(22).Value = (CStr(Original_Country))
			End If
			If (Original_HomePhone Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(23).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(23).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(24).Value = (CStr(Original_HomePhone))
			End If
			If (Original_Extension Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(25).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(25).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(26).Value = (CStr(Original_Extension))
			End If
			If (Original_Photo Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(27).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(27).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(28).Value = (CStr(Original_Photo))
			End If
			If (Original_ReportsTo.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(29).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(30).Value = (CInt(Fix(Original_ReportsTo.Value)))
			Else
				Me.Adapter.DeleteCommand.Parameters(29).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
			End If
			Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
			If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
				Me.Adapter.DeleteCommand.Connection.Open()
			End If
			Try
				Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery()
				Return returnValue
			Finally
				If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
					Me.Adapter.DeleteCommand.Connection.Close()
				End If
			End Try
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
		Public Overridable Function Insert(ByVal LastName As String, ByVal FirstName As String, ByVal Title As String, ByVal TitleOfCourtesy As String, ByVal BirthDate As Global.System.Nullable(Of Global.System.DateTime), ByVal HireDate As Global.System.Nullable(Of Global.System.DateTime), ByVal Address As String, ByVal City As String, ByVal Region As String, ByVal PostalCode As String, ByVal Country As String, ByVal HomePhone As String, ByVal Extension As String, ByVal Photo As String, ByVal Notes As String, ByVal ReportsTo As Global.System.Nullable(Of Integer)) As Integer
			If (LastName Is Nothing) Then
				Throw New Global.System.ArgumentNullException("LastName")
			Else
				Me.Adapter.InsertCommand.Parameters(0).Value = (CStr(LastName))
			End If
			If (FirstName Is Nothing) Then
				Throw New Global.System.ArgumentNullException("FirstName")
			Else
				Me.Adapter.InsertCommand.Parameters(1).Value = (CStr(FirstName))
			End If
			If (Title Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(2).Value = (CStr(Title))
			End If
			If (TitleOfCourtesy Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(3).Value = (CStr(TitleOfCourtesy))
			End If
			If (BirthDate.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(4).Value = (CDate(BirthDate.Value))
			Else
				Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
			End If
			If (HireDate.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(5).Value = (CDate(HireDate.Value))
			Else
				Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
			End If
			If (Address Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(6).Value = (CStr(Address))
			End If
			If (City Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(7).Value = (CStr(City))
			End If
			If (Region Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(8).Value = (CStr(Region))
			End If
			If (PostalCode Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(9).Value = (CStr(PostalCode))
			End If
			If (Country Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(10).Value = (CStr(Country))
			End If
			If (HomePhone Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(11).Value = (CStr(HomePhone))
			End If
			If (Extension Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(12).Value = (CStr(Extension))
			End If
			If (Photo Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(13).Value = (CStr(Photo))
			End If
			If (Notes Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(14).Value = (CStr(Notes))
			End If
			If (ReportsTo.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(15).Value = (CInt(Fix(ReportsTo.Value)))
			Else
				Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
			End If
			Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
			If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
				Me.Adapter.InsertCommand.Connection.Open()
			End If
			Try
				Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery()
				Return returnValue
			Finally
				If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
					Me.Adapter.InsertCommand.Connection.Close()
				End If
			End Try
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
		Public Overridable Function Update(ByVal LastName As String, ByVal FirstName As String, ByVal Title As String, ByVal TitleOfCourtesy As String, ByVal BirthDate As Global.System.Nullable(Of Global.System.DateTime), ByVal HireDate As Global.System.Nullable(Of Global.System.DateTime), ByVal Address As String, ByVal City As String, ByVal Region As String, ByVal PostalCode As String, ByVal Country As String, ByVal HomePhone As String, ByVal Extension As String, ByVal Photo As String, ByVal Notes As String, ByVal ReportsTo As Global.System.Nullable(Of Integer), ByVal Original_EmployeeID As Integer, ByVal Original_LastName As String, ByVal Original_FirstName As String, ByVal Original_Title As String, ByVal Original_TitleOfCourtesy As String, ByVal Original_BirthDate As Global.System.Nullable(Of Global.System.DateTime), ByVal Original_HireDate As Global.System.Nullable(Of Global.System.DateTime), ByVal Original_Address As String, ByVal Original_City As String, ByVal Original_Region As String, ByVal Original_PostalCode As String, ByVal Original_Country As String, ByVal Original_HomePhone As String, ByVal Original_Extension As String, ByVal Original_Photo As String, ByVal Original_ReportsTo As Global.System.Nullable(Of Integer)) As Integer
			If (LastName Is Nothing) Then
				Throw New Global.System.ArgumentNullException("LastName")
			Else
				Me.Adapter.UpdateCommand.Parameters(0).Value = (CStr(LastName))
			End If
			If (FirstName Is Nothing) Then
				Throw New Global.System.ArgumentNullException("FirstName")
			Else
				Me.Adapter.UpdateCommand.Parameters(1).Value = (CStr(FirstName))
			End If
			If (Title Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(2).Value = (CStr(Title))
			End If
			If (TitleOfCourtesy Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(3).Value = (CStr(TitleOfCourtesy))
			End If
			If (BirthDate.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(4).Value = (CDate(BirthDate.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
			End If
			If (HireDate.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(5).Value = (CDate(HireDate.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
			End If
			If (Address Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(6).Value = (CStr(Address))
			End If
			If (City Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(7).Value = (CStr(City))
			End If
			If (Region Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(8).Value = (CStr(Region))
			End If
			If (PostalCode Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(9).Value = (CStr(PostalCode))
			End If
			If (Country Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(10).Value = (CStr(Country))
			End If
			If (HomePhone Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(11).Value = (CStr(HomePhone))
			End If
			If (Extension Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(12).Value = (CStr(Extension))
			End If
			If (Photo Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(13).Value = (CStr(Photo))
			End If
			If (Notes Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(14).Value = (CStr(Notes))
			End If
			If (ReportsTo.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(15).Value = (CInt(Fix(ReportsTo.Value)))
			Else
				Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
			End If
			Me.Adapter.UpdateCommand.Parameters(16).Value = (CInt(Fix(Original_EmployeeID)))
			If (Original_LastName Is Nothing) Then
				Throw New Global.System.ArgumentNullException("Original_LastName")
			Else
				Me.Adapter.UpdateCommand.Parameters(17).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(18).Value = (CStr(Original_LastName))
			End If
			If (Original_FirstName Is Nothing) Then
				Throw New Global.System.ArgumentNullException("Original_FirstName")
			Else
				Me.Adapter.UpdateCommand.Parameters(19).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(20).Value = (CStr(Original_FirstName))
			End If
			If (Original_Title Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(21).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(21).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(22).Value = (CStr(Original_Title))
			End If
			If (Original_TitleOfCourtesy Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(23).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(23).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(24).Value = (CStr(Original_TitleOfCourtesy))
			End If
			If (Original_BirthDate.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(25).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(26).Value = (CDate(Original_BirthDate.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(25).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
			End If
			If (Original_HireDate.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(27).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(28).Value = (CDate(Original_HireDate.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(27).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
			End If
			If (Original_Address Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(29).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(29).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(30).Value = (CStr(Original_Address))
			End If
			If (Original_City Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(31).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(31).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(32).Value = (CStr(Original_City))
			End If
			If (Original_Region Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(33).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(33).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(34).Value = (CStr(Original_Region))
			End If
			If (Original_PostalCode Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(35).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(35).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(36).Value = (CStr(Original_PostalCode))
			End If
			If (Original_Country Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(37).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(37).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(38).Value = (CStr(Original_Country))
			End If
			If (Original_HomePhone Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(39).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(39).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(40).Value = (CStr(Original_HomePhone))
			End If
			If (Original_Extension Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(41).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(41).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(42).Value = (CStr(Original_Extension))
			End If
			If (Original_Photo Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(43).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(44).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(43).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(44).Value = (CStr(Original_Photo))
			End If
			If (Original_ReportsTo.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(45).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(46).Value = (CInt(Fix(Original_ReportsTo.Value)))
			Else
				Me.Adapter.UpdateCommand.Parameters(45).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(46).Value = Global.System.DBNull.Value
			End If
			Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
			If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
				Me.Adapter.UpdateCommand.Connection.Open()
			End If
			Try
				Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery()
				Return returnValue
			Finally
				If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
					Me.Adapter.UpdateCommand.Connection.Close()
				End If
			End Try
		End Function
	End Class
End Namespace

